// Code generated from Parser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser // Parser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

import (
	expressions "TSwift/Classes/Expressions"
	instructions "TSwift/Classes/Instructions"
	interfaces "TSwift/Classes/Interfaces"
	utils "TSwift/Classes/Utils"
	vector "TSwift/Classes/Vector"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ParserParser struct {
	*antlr.BaseParser
}

var ParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func parserParserInit() {
	staticData := &ParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'Int'", "'Float'", "'String'", "'Bool'", "'Character'", "'var'",
		"'let'", "'if'", "'else'", "'for'", "'while'", "'guard'", "'switch'",
		"'case'", "'default'", "'break'", "'continue'", "'return'", "'true'",
		"'false'", "'nil'", "'func'", "'inout'", "'in'", "'append'", "'removeLast'",
		"'remove'", "'at'", "'isEmpty'", "'count'", "'repeating'", "'struct'",
		"'mutating'", "'self'", "'print'", "'->'", "'_'", "", "", "", "", "",
		"'+='", "'-='", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<='",
		"'>='", "'='", "'<'", "'>'", "'&&'", "'||'", "'!'", "'('", "')'", "'{'",
		"'}'", "'['", "']'", "'.'", "','", "':'", "';'", "'?'", "'&'", "'\\n'",
	}
	staticData.SymbolicNames = []string{
		"", "RW_Int", "RW_Float", "RW_String", "RW_Bool", "RW_Character", "RW_var",
		"RW_let", "RW_if", "RW_else", "RW_for", "RW_while", "RW_guard", "RW_switch",
		"RW_case", "RW_default", "RW_break", "RW_continue", "RW_return", "RW_true",
		"RW_false", "RW_nil", "RW_func", "RW_inout", "RW_in", "RW_append", "RW_removeLast",
		"RW_remove", "RW_at", "RW_isEmpty", "RW_count", "RW_repeating", "RW_struct",
		"RW_mutating", "RW_self", "RW_print", "TK_prompt", "TK_under", "TK_char",
		"TK_string", "TK_int", "TK_float", "TK_id", "TK_add", "TK_sub", "TK_plus",
		"TK_minus", "TK_mult", "TK_div", "TK_mod", "TK_equequ", "TK_notequ",
		"TK_lessequ", "TK_moreequ", "TK_equ", "TK_less", "TK_more", "TK_and",
		"TK_or", "TK_not", "TK_lpar", "TK_rpar", "TK_lbrc", "TK_rbrc", "TK_lbrk",
		"TK_rbrk", "TK_dot", "TK_comma", "TK_colon", "TK_semicolon", "TK_question",
		"TK_amp", "NEWLINE", "UNUSED_", "COMMENTS_", "COMMENTM_", "ERROR",
	}
	staticData.RuleNames = []string{
		"init", "instsglobal", "instglobal", "callfunc", "listargs", "decvar",
		"deccst", "declfunc", "listparams", "ifstruct", "switchstruct", "envs",
		"casesdefault", "cases", "case", "default", "loopfor", "range", "loopwhile",
		"guard", "reasign", "addsub", "decvector", "defvector", "listexp", "funcvector",
		"decmatrix", "defmatrix", "matrix", "vectors", "vector", "simplematrix",
		"typematrix", "reasignvector", "dims", "defstruct", "listattribs", "attrib",
		"decstruct", "listdupla", "useattribs", "obj", "useattribs1", "print",
		"env", "instructions", "instruction", "type", "typeComp", "exp",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 76, 968, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
		3, 0, 107, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1,
		117, 8, 1, 10, 1, 12, 1, 120, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
		3, 2, 128, 8, 2, 3, 2, 130, 8, 2, 1, 3, 1, 3, 1, 3, 3, 3, 135, 8, 3, 1,
		3, 1, 3, 1, 4, 1, 4, 3, 4, 141, 8, 4, 1, 4, 3, 4, 144, 8, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 152, 8, 4, 1, 4, 3, 4, 155, 8, 4, 1, 4, 3,
		4, 158, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3,
		5, 181, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 197, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 3, 7, 228, 8, 7, 1, 8, 3, 8, 231, 8, 8, 1, 8, 1, 8, 1, 8, 3, 8, 236,
		8, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 243, 8, 8, 1, 8, 1, 8, 1, 8,
		3, 8, 248, 8, 8, 1, 8, 3, 8, 251, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 3, 9, 272, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 287, 8, 11, 1, 12,
		1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 299,
		8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 309,
		8, 13, 10, 13, 12, 13, 312, 9, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 325, 8, 14, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 335, 8, 15, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 3, 16, 351, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 3, 22, 413, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 3, 23, 432, 8, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		24, 1, 24, 1, 24, 5, 24, 443, 8, 24, 10, 24, 12, 24, 446, 9, 24, 1, 25,
		1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25,
		1, 25, 1, 25, 3, 25, 472, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 488,
		8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 496, 8, 27, 1,
		28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 5, 29, 512, 8, 29, 10, 29, 12, 29, 515, 9, 29, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 525, 8, 30,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31,
		1, 31, 1, 31, 1, 31, 3, 31, 551, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 563, 8, 32, 1, 33, 1, 33,
		1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 583, 8, 34, 10, 34, 12, 34,
		586, 9, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1,
		36, 3, 36, 597, 8, 36, 1, 36, 1, 36, 3, 36, 601, 8, 36, 1, 36, 5, 36, 604,
		8, 36, 10, 36, 12, 36, 607, 9, 36, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 613,
		8, 37, 1, 37, 1, 37, 3, 37, 617, 8, 37, 1, 37, 3, 37, 620, 8, 37, 1, 37,
		3, 37, 623, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 629, 8, 38, 1, 38,
		1, 38, 1, 38, 1, 38, 3, 38, 635, 8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1,
		38, 3, 38, 642, 8, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 648, 8, 38, 1,
		39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 659,
		8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 668, 8,
		40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 676, 8, 41, 1, 42,
		1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 683, 8, 42, 1, 43, 1, 43, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 695, 8, 43, 1, 44,
		1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 705, 8, 44, 1,
		45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 5, 45, 715, 8, 45,
		10, 45, 12, 45, 718, 9, 45, 1, 46, 1, 46, 3, 46, 722, 8, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 3, 46, 728, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 1, 46, 3, 46, 749, 8, 46, 1, 46, 1, 46, 3, 46, 753, 8,
		46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 759, 8, 46, 1, 46, 1, 46, 3, 46,
		763, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 769, 8, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 3, 46, 775, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 781,
		8, 46, 1, 46, 1, 46, 3, 46, 785, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3,
		46, 791, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 797, 8, 46, 1, 46, 1,
		46, 3, 46, 801, 8, 46, 1, 46, 1, 46, 3, 46, 805, 8, 46, 1, 46, 1, 46, 3,
		46, 809, 8, 46, 1, 46, 1, 46, 3, 46, 813, 8, 46, 1, 46, 1, 46, 3, 46, 817,
		8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 824, 8, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 3, 46, 830, 8, 46, 1, 46, 1, 46, 1, 46, 3, 46, 835, 8,
		46, 1, 46, 1, 46, 1, 46, 3, 46, 840, 8, 46, 1, 46, 3, 46, 843, 8, 46, 1,
		47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47,
		855, 8, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 862, 8, 48, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49,
		885, 8, 49, 1, 49, 1, 49, 1, 49, 3, 49, 890, 8, 49, 1, 49, 1, 49, 1, 49,
		3, 49, 895, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 3, 49, 918, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 5, 49, 963, 8, 49, 10,
		49, 12, 49, 966, 9, 49, 1, 49, 0, 8, 2, 26, 48, 58, 68, 72, 90, 98, 50,
		0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
		38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
		74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 0, 8, 2, 0, 37, 37,
		42, 42, 1, 0, 43, 44, 1, 0, 6, 7, 1, 0, 47, 49, 1, 0, 45, 46, 1, 0, 52,
		53, 1, 0, 55, 56, 1, 0, 50, 51, 1054, 0, 106, 1, 0, 0, 0, 2, 108, 1, 0,
		0, 0, 4, 129, 1, 0, 0, 0, 6, 131, 1, 0, 0, 0, 8, 157, 1, 0, 0, 0, 10, 180,
		1, 0, 0, 0, 12, 196, 1, 0, 0, 0, 14, 227, 1, 0, 0, 0, 16, 250, 1, 0, 0,
		0, 18, 271, 1, 0, 0, 0, 20, 273, 1, 0, 0, 0, 22, 286, 1, 0, 0, 0, 24, 298,
		1, 0, 0, 0, 26, 300, 1, 0, 0, 0, 28, 324, 1, 0, 0, 0, 30, 334, 1, 0, 0,
		0, 32, 350, 1, 0, 0, 0, 34, 352, 1, 0, 0, 0, 36, 359, 1, 0, 0, 0, 38, 364,
		1, 0, 0, 0, 40, 370, 1, 0, 0, 0, 42, 375, 1, 0, 0, 0, 44, 412, 1, 0, 0,
		0, 46, 431, 1, 0, 0, 0, 48, 433, 1, 0, 0, 0, 50, 471, 1, 0, 0, 0, 52, 487,
		1, 0, 0, 0, 54, 495, 1, 0, 0, 0, 56, 497, 1, 0, 0, 0, 58, 502, 1, 0, 0,
		0, 60, 524, 1, 0, 0, 0, 62, 550, 1, 0, 0, 0, 64, 562, 1, 0, 0, 0, 66, 564,
		1, 0, 0, 0, 68, 570, 1, 0, 0, 0, 70, 587, 1, 0, 0, 0, 72, 593, 1, 0, 0,
		0, 74, 622, 1, 0, 0, 0, 76, 647, 1, 0, 0, 0, 78, 658, 1, 0, 0, 0, 80, 667,
		1, 0, 0, 0, 82, 675, 1, 0, 0, 0, 84, 682, 1, 0, 0, 0, 86, 694, 1, 0, 0,
		0, 88, 704, 1, 0, 0, 0, 90, 706, 1, 0, 0, 0, 92, 842, 1, 0, 0, 0, 94, 854,
		1, 0, 0, 0, 96, 861, 1, 0, 0, 0, 98, 917, 1, 0, 0, 0, 100, 101, 3, 2, 1,
		0, 101, 102, 5, 0, 0, 1, 102, 103, 6, 0, -1, 0, 103, 107, 1, 0, 0, 0, 104,
		105, 5, 0, 0, 1, 105, 107, 6, 0, -1, 0, 106, 100, 1, 0, 0, 0, 106, 104,
		1, 0, 0, 0, 107, 1, 1, 0, 0, 0, 108, 109, 6, 1, -1, 0, 109, 110, 3, 4,
		2, 0, 110, 111, 6, 1, -1, 0, 111, 118, 1, 0, 0, 0, 112, 113, 10, 2, 0,
		0, 113, 114, 3, 4, 2, 0, 114, 115, 6, 1, -1, 0, 115, 117, 1, 0, 0, 0, 116,
		112, 1, 0, 0, 0, 117, 120, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 118, 119,
		1, 0, 0, 0, 119, 3, 1, 0, 0, 0, 120, 118, 1, 0, 0, 0, 121, 122, 3, 92,
		46, 0, 122, 123, 6, 2, -1, 0, 123, 130, 1, 0, 0, 0, 124, 130, 3, 14, 7,
		0, 125, 127, 3, 70, 35, 0, 126, 128, 5, 69, 0, 0, 127, 126, 1, 0, 0, 0,
		127, 128, 1, 0, 0, 0, 128, 130, 1, 0, 0, 0, 129, 121, 1, 0, 0, 0, 129,
		124, 1, 0, 0, 0, 129, 125, 1, 0, 0, 0, 130, 5, 1, 0, 0, 0, 131, 132, 5,
		42, 0, 0, 132, 134, 5, 60, 0, 0, 133, 135, 3, 8, 4, 0, 134, 133, 1, 0,
		0, 0, 134, 135, 1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 137, 5, 61, 0, 0,
		137, 7, 1, 0, 0, 0, 138, 139, 5, 42, 0, 0, 139, 141, 5, 68, 0, 0, 140,
		138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 143, 1, 0, 0, 0, 142, 144,
		5, 71, 0, 0, 143, 142, 1, 0, 0, 0, 143, 144, 1, 0, 0, 0, 144, 145, 1, 0,
		0, 0, 145, 146, 3, 98, 49, 0, 146, 147, 5, 67, 0, 0, 147, 148, 3, 8, 4,
		0, 148, 158, 1, 0, 0, 0, 149, 150, 5, 42, 0, 0, 150, 152, 5, 68, 0, 0,
		151, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0, 152, 154, 1, 0, 0, 0, 153,
		155, 5, 71, 0, 0, 154, 153, 1, 0, 0, 0, 154, 155, 1, 0, 0, 0, 155, 156,
		1, 0, 0, 0, 156, 158, 3, 98, 49, 0, 157, 140, 1, 0, 0, 0, 157, 151, 1,
		0, 0, 0, 158, 9, 1, 0, 0, 0, 159, 160, 5, 6, 0, 0, 160, 161, 5, 42, 0,
		0, 161, 162, 5, 68, 0, 0, 162, 163, 3, 94, 47, 0, 163, 164, 5, 54, 0, 0,
		164, 165, 3, 98, 49, 0, 165, 166, 6, 5, -1, 0, 166, 181, 1, 0, 0, 0, 167,
		168, 5, 6, 0, 0, 168, 169, 5, 42, 0, 0, 169, 170, 5, 68, 0, 0, 170, 171,
		3, 94, 47, 0, 171, 172, 5, 70, 0, 0, 172, 173, 6, 5, -1, 0, 173, 181, 1,
		0, 0, 0, 174, 175, 5, 6, 0, 0, 175, 176, 5, 42, 0, 0, 176, 177, 5, 54,
		0, 0, 177, 178, 3, 98, 49, 0, 178, 179, 6, 5, -1, 0, 179, 181, 1, 0, 0,
		0, 180, 159, 1, 0, 0, 0, 180, 167, 1, 0, 0, 0, 180, 174, 1, 0, 0, 0, 181,
		11, 1, 0, 0, 0, 182, 183, 5, 7, 0, 0, 183, 184, 5, 42, 0, 0, 184, 185,
		5, 68, 0, 0, 185, 186, 3, 94, 47, 0, 186, 187, 5, 54, 0, 0, 187, 188, 3,
		98, 49, 0, 188, 189, 6, 6, -1, 0, 189, 197, 1, 0, 0, 0, 190, 191, 5, 7,
		0, 0, 191, 192, 5, 42, 0, 0, 192, 193, 5, 54, 0, 0, 193, 194, 3, 98, 49,
		0, 194, 195, 6, 6, -1, 0, 195, 197, 1, 0, 0, 0, 196, 182, 1, 0, 0, 0, 196,
		190, 1, 0, 0, 0, 197, 13, 1, 0, 0, 0, 198, 199, 5, 22, 0, 0, 199, 200,
		5, 42, 0, 0, 200, 201, 5, 60, 0, 0, 201, 202, 3, 16, 8, 0, 202, 203, 5,
		61, 0, 0, 203, 204, 5, 36, 0, 0, 204, 205, 3, 96, 48, 0, 205, 206, 3, 88,
		44, 0, 206, 228, 1, 0, 0, 0, 207, 208, 5, 22, 0, 0, 208, 209, 5, 42, 0,
		0, 209, 210, 5, 60, 0, 0, 210, 211, 3, 16, 8, 0, 211, 212, 5, 61, 0, 0,
		212, 213, 3, 88, 44, 0, 213, 228, 1, 0, 0, 0, 214, 215, 5, 22, 0, 0, 215,
		216, 5, 42, 0, 0, 216, 217, 5, 60, 0, 0, 217, 218, 5, 61, 0, 0, 218, 219,
		5, 36, 0, 0, 219, 220, 3, 96, 48, 0, 220, 221, 3, 88, 44, 0, 221, 228,
		1, 0, 0, 0, 222, 223, 5, 22, 0, 0, 223, 224, 5, 42, 0, 0, 224, 225, 5,
		60, 0, 0, 225, 226, 5, 61, 0, 0, 226, 228, 3, 88, 44, 0, 227, 198, 1, 0,
		0, 0, 227, 207, 1, 0, 0, 0, 227, 214, 1, 0, 0, 0, 227, 222, 1, 0, 0, 0,
		228, 15, 1, 0, 0, 0, 229, 231, 7, 0, 0, 0, 230, 229, 1, 0, 0, 0, 230, 231,
		1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 233, 5, 42, 0, 0, 233, 235, 5, 68,
		0, 0, 234, 236, 5, 23, 0, 0, 235, 234, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0,
		236, 237, 1, 0, 0, 0, 237, 238, 3, 96, 48, 0, 238, 239, 5, 67, 0, 0, 239,
		240, 3, 16, 8, 0, 240, 251, 1, 0, 0, 0, 241, 243, 7, 0, 0, 0, 242, 241,
		1, 0, 0, 0, 242, 243, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 245, 5, 42,
		0, 0, 245, 247, 5, 68, 0, 0, 246, 248, 5, 23, 0, 0, 247, 246, 1, 0, 0,
		0, 247, 248, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 251, 3, 96, 48, 0,
		250, 230, 1, 0, 0, 0, 250, 242, 1, 0, 0, 0, 251, 17, 1, 0, 0, 0, 252, 253,
		5, 8, 0, 0, 253, 254, 3, 98, 49, 0, 254, 255, 3, 88, 44, 0, 255, 256, 5,
		9, 0, 0, 256, 257, 3, 18, 9, 0, 257, 258, 6, 9, -1, 0, 258, 272, 1, 0,
		0, 0, 259, 260, 5, 8, 0, 0, 260, 261, 3, 98, 49, 0, 261, 262, 3, 88, 44,
		0, 262, 263, 5, 9, 0, 0, 263, 264, 3, 88, 44, 0, 264, 265, 6, 9, -1, 0,
		265, 272, 1, 0, 0, 0, 266, 267, 5, 8, 0, 0, 267, 268, 3, 98, 49, 0, 268,
		269, 3, 88, 44, 0, 269, 270, 6, 9, -1, 0, 270, 272, 1, 0, 0, 0, 271, 252,
		1, 0, 0, 0, 271, 259, 1, 0, 0, 0, 271, 266, 1, 0, 0, 0, 272, 19, 1, 0,
		0, 0, 273, 274, 5, 13, 0, 0, 274, 275, 3, 98, 49, 0, 275, 276, 3, 22, 11,
		0, 276, 277, 6, 10, -1, 0, 277, 21, 1, 0, 0, 0, 278, 279, 5, 62, 0, 0,
		279, 280, 3, 24, 12, 0, 280, 281, 5, 63, 0, 0, 281, 282, 6, 11, -1, 0,
		282, 287, 1, 0, 0, 0, 283, 284, 5, 62, 0, 0, 284, 285, 5, 63, 0, 0, 285,
		287, 6, 11, -1, 0, 286, 278, 1, 0, 0, 0, 286, 283, 1, 0, 0, 0, 287, 23,
		1, 0, 0, 0, 288, 289, 3, 26, 13, 0, 289, 290, 3, 30, 15, 0, 290, 291, 6,
		12, -1, 0, 291, 299, 1, 0, 0, 0, 292, 293, 3, 26, 13, 0, 293, 294, 6, 12,
		-1, 0, 294, 299, 1, 0, 0, 0, 295, 296, 3, 30, 15, 0, 296, 297, 6, 12, -1,
		0, 297, 299, 1, 0, 0, 0, 298, 288, 1, 0, 0, 0, 298, 292, 1, 0, 0, 0, 298,
		295, 1, 0, 0, 0, 299, 25, 1, 0, 0, 0, 300, 301, 6, 13, -1, 0, 301, 302,
		3, 28, 14, 0, 302, 303, 6, 13, -1, 0, 303, 310, 1, 0, 0, 0, 304, 305, 10,
		2, 0, 0, 305, 306, 3, 28, 14, 0, 306, 307, 6, 13, -1, 0, 307, 309, 1, 0,
		0, 0, 308, 304, 1, 0, 0, 0, 309, 312, 1, 0, 0, 0, 310, 308, 1, 0, 0, 0,
		310, 311, 1, 0, 0, 0, 311, 27, 1, 0, 0, 0, 312, 310, 1, 0, 0, 0, 313, 314,
		5, 14, 0, 0, 314, 315, 3, 98, 49, 0, 315, 316, 5, 68, 0, 0, 316, 317, 3,
		90, 45, 0, 317, 318, 6, 14, -1, 0, 318, 325, 1, 0, 0, 0, 319, 320, 5, 14,
		0, 0, 320, 321, 3, 98, 49, 0, 321, 322, 5, 68, 0, 0, 322, 323, 6, 14, -1,
		0, 323, 325, 1, 0, 0, 0, 324, 313, 1, 0, 0, 0, 324, 319, 1, 0, 0, 0, 325,
		29, 1, 0, 0, 0, 326, 327, 5, 15, 0, 0, 327, 328, 5, 68, 0, 0, 328, 329,
		3, 90, 45, 0, 329, 330, 6, 15, -1, 0, 330, 335, 1, 0, 0, 0, 331, 332, 5,
		15, 0, 0, 332, 333, 5, 68, 0, 0, 333, 335, 6, 15, -1, 0, 334, 326, 1, 0,
		0, 0, 334, 331, 1, 0, 0, 0, 335, 31, 1, 0, 0, 0, 336, 337, 5, 10, 0, 0,
		337, 338, 7, 0, 0, 0, 338, 339, 5, 24, 0, 0, 339, 340, 3, 34, 17, 0, 340,
		341, 3, 88, 44, 0, 341, 342, 6, 16, -1, 0, 342, 351, 1, 0, 0, 0, 343, 344,
		5, 10, 0, 0, 344, 345, 7, 0, 0, 0, 345, 346, 5, 24, 0, 0, 346, 347, 3,
		98, 49, 0, 347, 348, 3, 88, 44, 0, 348, 349, 6, 16, -1, 0, 349, 351, 1,
		0, 0, 0, 350, 336, 1, 0, 0, 0, 350, 343, 1, 0, 0, 0, 351, 33, 1, 0, 0,
		0, 352, 353, 3, 98, 49, 0, 353, 354, 5, 66, 0, 0, 354, 355, 5, 66, 0, 0,
		355, 356, 5, 66, 0, 0, 356, 357, 3, 98, 49, 0, 357, 358, 6, 17, -1, 0,
		358, 35, 1, 0, 0, 0, 359, 360, 5, 11, 0, 0, 360, 361, 3, 98, 49, 0, 361,
		362, 3, 88, 44, 0, 362, 363, 6, 18, -1, 0, 363, 37, 1, 0, 0, 0, 364, 365,
		5, 12, 0, 0, 365, 366, 3, 98, 49, 0, 366, 367, 5, 9, 0, 0, 367, 368, 3,
		88, 44, 0, 368, 369, 6, 19, -1, 0, 369, 39, 1, 0, 0, 0, 370, 371, 5, 42,
		0, 0, 371, 372, 5, 54, 0, 0, 372, 373, 3, 98, 49, 0, 373, 374, 6, 20, -1,
		0, 374, 41, 1, 0, 0, 0, 375, 376, 5, 42, 0, 0, 376, 377, 7, 1, 0, 0, 377,
		378, 3, 98, 49, 0, 378, 379, 6, 21, -1, 0, 379, 43, 1, 0, 0, 0, 380, 381,
		5, 6, 0, 0, 381, 382, 5, 42, 0, 0, 382, 383, 5, 68, 0, 0, 383, 384, 5,
		64, 0, 0, 384, 385, 3, 96, 48, 0, 385, 386, 5, 65, 0, 0, 386, 387, 5, 54,
		0, 0, 387, 388, 3, 46, 23, 0, 388, 389, 6, 22, -1, 0, 389, 413, 1, 0, 0,
		0, 390, 391, 5, 7, 0, 0, 391, 392, 5, 42, 0, 0, 392, 393, 5, 68, 0, 0,
		393, 394, 5, 64, 0, 0, 394, 395, 3, 96, 48, 0, 395, 396, 5, 65, 0, 0, 396,
		397, 5, 54, 0, 0, 397, 398, 3, 46, 23, 0, 398, 399, 6, 22, -1, 0, 399,
		413, 1, 0, 0, 0, 400, 401, 5, 6, 0, 0, 401, 402, 5, 42, 0, 0, 402, 403,
		5, 54, 0, 0, 403, 404, 3, 46, 23, 0, 404, 405, 6, 22, -1, 0, 405, 413,
		1, 0, 0, 0, 406, 407, 5, 7, 0, 0, 407, 408, 5, 42, 0, 0, 408, 409, 5, 54,
		0, 0, 409, 410, 3, 46, 23, 0, 410, 411, 6, 22, -1, 0, 411, 413, 1, 0, 0,
		0, 412, 380, 1, 0, 0, 0, 412, 390, 1, 0, 0, 0, 412, 400, 1, 0, 0, 0, 412,
		406, 1, 0, 0, 0, 413, 45, 1, 0, 0, 0, 414, 415, 5, 64, 0, 0, 415, 416,
		3, 48, 24, 0, 416, 417, 5, 65, 0, 0, 417, 418, 6, 23, -1, 0, 418, 432,
		1, 0, 0, 0, 419, 420, 5, 64, 0, 0, 420, 421, 5, 65, 0, 0, 421, 432, 6,
		23, -1, 0, 422, 423, 5, 64, 0, 0, 423, 424, 3, 96, 48, 0, 424, 425, 5,
		65, 0, 0, 425, 426, 5, 60, 0, 0, 426, 427, 5, 61, 0, 0, 427, 428, 6, 23,
		-1, 0, 428, 432, 1, 0, 0, 0, 429, 430, 5, 42, 0, 0, 430, 432, 6, 23, -1,
		0, 431, 414, 1, 0, 0, 0, 431, 419, 1, 0, 0, 0, 431, 422, 1, 0, 0, 0, 431,
		429, 1, 0, 0, 0, 432, 47, 1, 0, 0, 0, 433, 434, 6, 24, -1, 0, 434, 435,
		3, 98, 49, 0, 435, 436, 6, 24, -1, 0, 436, 444, 1, 0, 0, 0, 437, 438, 10,
		2, 0, 0, 438, 439, 5, 67, 0, 0, 439, 440, 3, 98, 49, 0, 440, 441, 6, 24,
		-1, 0, 441, 443, 1, 0, 0, 0, 442, 437, 1, 0, 0, 0, 443, 446, 1, 0, 0, 0,
		444, 442, 1, 0, 0, 0, 444, 445, 1, 0, 0, 0, 445, 49, 1, 0, 0, 0, 446, 444,
		1, 0, 0, 0, 447, 448, 5, 42, 0, 0, 448, 449, 5, 66, 0, 0, 449, 450, 5,
		25, 0, 0, 450, 451, 5, 60, 0, 0, 451, 452, 3, 98, 49, 0, 452, 453, 5, 61,
		0, 0, 453, 454, 6, 25, -1, 0, 454, 472, 1, 0, 0, 0, 455, 456, 5, 42, 0,
		0, 456, 457, 5, 66, 0, 0, 457, 458, 5, 26, 0, 0, 458, 459, 5, 60, 0, 0,
		459, 460, 5, 61, 0, 0, 460, 472, 6, 25, -1, 0, 461, 462, 5, 42, 0, 0, 462,
		463, 5, 66, 0, 0, 463, 464, 5, 27, 0, 0, 464, 465, 5, 60, 0, 0, 465, 466,
		5, 28, 0, 0, 466, 467, 5, 68, 0, 0, 467, 468, 3, 98, 49, 0, 468, 469, 5,
		61, 0, 0, 469, 470, 6, 25, -1, 0, 470, 472, 1, 0, 0, 0, 471, 447, 1, 0,
		0, 0, 471, 455, 1, 0, 0, 0, 471, 461, 1, 0, 0, 0, 472, 51, 1, 0, 0, 0,
		473, 474, 5, 6, 0, 0, 474, 475, 5, 42, 0, 0, 475, 476, 5, 68, 0, 0, 476,
		477, 3, 64, 32, 0, 477, 478, 5, 54, 0, 0, 478, 479, 3, 54, 27, 0, 479,
		480, 6, 26, -1, 0, 480, 488, 1, 0, 0, 0, 481, 482, 5, 6, 0, 0, 482, 483,
		5, 42, 0, 0, 483, 484, 5, 54, 0, 0, 484, 485, 3, 54, 27, 0, 485, 486, 6,
		26, -1, 0, 486, 488, 1, 0, 0, 0, 487, 473, 1, 0, 0, 0, 487, 481, 1, 0,
		0, 0, 488, 53, 1, 0, 0, 0, 489, 490, 3, 56, 28, 0, 490, 491, 6, 27, -1,
		0, 491, 496, 1, 0, 0, 0, 492, 493, 3, 62, 31, 0, 493, 494, 6, 27, -1, 0,
		494, 496, 1, 0, 0, 0, 495, 489, 1, 0, 0, 0, 495, 492, 1, 0, 0, 0, 496,
		55, 1, 0, 0, 0, 497, 498, 5, 64, 0, 0, 498, 499, 3, 58, 29, 0, 499, 500,
		5, 65, 0, 0, 500, 501, 6, 28, -1, 0, 501, 57, 1, 0, 0, 0, 502, 503, 6,
		29, -1, 0, 503, 504, 3, 60, 30, 0, 504, 505, 6, 29, -1, 0, 505, 513, 1,
		0, 0, 0, 506, 507, 10, 2, 0, 0, 507, 508, 5, 67, 0, 0, 508, 509, 3, 60,
		30, 0, 509, 510, 6, 29, -1, 0, 510, 512, 1, 0, 0, 0, 511, 506, 1, 0, 0,
		0, 512, 515, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514,
		59, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 516, 517, 5, 64, 0, 0, 517, 518,
		3, 48, 24, 0, 518, 519, 5, 65, 0, 0, 519, 520, 6, 30, -1, 0, 520, 525,
		1, 0, 0, 0, 521, 522, 3, 56, 28, 0, 522, 523, 6, 30, -1, 0, 523, 525, 1,
		0, 0, 0, 524, 516, 1, 0, 0, 0, 524, 521, 1, 0, 0, 0, 525, 61, 1, 0, 0,
		0, 526, 527, 3, 64, 32, 0, 527, 528, 5, 60, 0, 0, 528, 529, 5, 31, 0, 0,
		529, 530, 5, 68, 0, 0, 530, 531, 3, 62, 31, 0, 531, 532, 5, 67, 0, 0, 532,
		533, 5, 30, 0, 0, 533, 534, 5, 68, 0, 0, 534, 535, 3, 98, 49, 0, 535, 536,
		5, 61, 0, 0, 536, 537, 6, 31, -1, 0, 537, 551, 1, 0, 0, 0, 538, 539, 3,
		64, 32, 0, 539, 540, 5, 60, 0, 0, 540, 541, 5, 31, 0, 0, 541, 542, 5, 68,
		0, 0, 542, 543, 3, 98, 49, 0, 543, 544, 5, 67, 0, 0, 544, 545, 5, 30, 0,
		0, 545, 546, 5, 68, 0, 0, 546, 547, 3, 98, 49, 0, 547, 548, 5, 61, 0, 0,
		548, 549, 6, 31, -1, 0, 549, 551, 1, 0, 0, 0, 550, 526, 1, 0, 0, 0, 550,
		538, 1, 0, 0, 0, 551, 63, 1, 0, 0, 0, 552, 553, 5, 64, 0, 0, 553, 554,
		3, 64, 32, 0, 554, 555, 5, 65, 0, 0, 555, 556, 6, 32, -1, 0, 556, 563,
		1, 0, 0, 0, 557, 558, 5, 64, 0, 0, 558, 559, 3, 94, 47, 0, 559, 560, 5,
		65, 0, 0, 560, 561, 6, 32, -1, 0, 561, 563, 1, 0, 0, 0, 562, 552, 1, 0,
		0, 0, 562, 557, 1, 0, 0, 0, 563, 65, 1, 0, 0, 0, 564, 565, 5, 42, 0, 0,
		565, 566, 3, 68, 34, 0, 566, 567, 5, 54, 0, 0, 567, 568, 3, 98, 49, 0,
		568, 569, 6, 33, -1, 0, 569, 67, 1, 0, 0, 0, 570, 571, 6, 34, -1, 0, 571,
		572, 5, 64, 0, 0, 572, 573, 3, 98, 49, 0, 573, 574, 5, 65, 0, 0, 574, 575,
		6, 34, -1, 0, 575, 584, 1, 0, 0, 0, 576, 577, 10, 2, 0, 0, 577, 578, 5,
		64, 0, 0, 578, 579, 3, 98, 49, 0, 579, 580, 5, 65, 0, 0, 580, 581, 6, 34,
		-1, 0, 581, 583, 1, 0, 0, 0, 582, 576, 1, 0, 0, 0, 583, 586, 1, 0, 0, 0,
		584, 582, 1, 0, 0, 0, 584, 585, 1, 0, 0, 0, 585, 69, 1, 0, 0, 0, 586, 584,
		1, 0, 0, 0, 587, 588, 5, 32, 0, 0, 588, 589, 5, 42, 0, 0, 589, 590, 5,
		62, 0, 0, 590, 591, 3, 72, 36, 0, 591, 592, 5, 63, 0, 0, 592, 71, 1, 0,
		0, 0, 593, 594, 6, 36, -1, 0, 594, 596, 3, 74, 37, 0, 595, 597, 5, 69,
		0, 0, 596, 595, 1, 0, 0, 0, 596, 597, 1, 0, 0, 0, 597, 605, 1, 0, 0, 0,
		598, 600, 10, 2, 0, 0, 599, 601, 5, 69, 0, 0, 600, 599, 1, 0, 0, 0, 600,
		601, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 604, 3, 74, 37, 0, 603, 598,
		1, 0, 0, 0, 604, 607, 1, 0, 0, 0, 605, 603, 1, 0, 0, 0, 605, 606, 1, 0,
		0, 0, 606, 73, 1, 0, 0, 0, 607, 605, 1, 0, 0, 0, 608, 609, 7, 2, 0, 0,
		609, 612, 5, 42, 0, 0, 610, 611, 5, 68, 0, 0, 611, 613, 3, 96, 48, 0, 612,
		610, 1, 0, 0, 0, 612, 613, 1, 0, 0, 0, 613, 616, 1, 0, 0, 0, 614, 615,
		5, 54, 0, 0, 615, 617, 3, 98, 49, 0, 616, 614, 1, 0, 0, 0, 616, 617, 1,
		0, 0, 0, 617, 623, 1, 0, 0, 0, 618, 620, 5, 33, 0, 0, 619, 618, 1, 0, 0,
		0, 619, 620, 1, 0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 623, 3, 14, 7, 0, 622,
		608, 1, 0, 0, 0, 622, 619, 1, 0, 0, 0, 623, 75, 1, 0, 0, 0, 624, 625, 7,
		2, 0, 0, 625, 628, 5, 42, 0, 0, 626, 627, 5, 68, 0, 0, 627, 629, 5, 42,
		0, 0, 628, 626, 1, 0, 0, 0, 628, 629, 1, 0, 0, 0, 629, 630, 1, 0, 0, 0,
		630, 631, 5, 54, 0, 0, 631, 632, 5, 42, 0, 0, 632, 634, 5, 60, 0, 0, 633,
		635, 3, 78, 39, 0, 634, 633, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 636,
		1, 0, 0, 0, 636, 648, 5, 61, 0, 0, 637, 638, 7, 2, 0, 0, 638, 641, 5, 42,
		0, 0, 639, 640, 5, 68, 0, 0, 640, 642, 5, 42, 0, 0, 641, 639, 1, 0, 0,
		0, 641, 642, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0, 643, 644, 5, 54, 0, 0, 644,
		645, 5, 42, 0, 0, 645, 646, 5, 60, 0, 0, 646, 648, 5, 61, 0, 0, 647, 624,
		1, 0, 0, 0, 647, 637, 1, 0, 0, 0, 648, 77, 1, 0, 0, 0, 649, 650, 5, 42,
		0, 0, 650, 651, 5, 68, 0, 0, 651, 652, 3, 98, 49, 0, 652, 653, 5, 67, 0,
		0, 653, 654, 3, 78, 39, 0, 654, 659, 1, 0, 0, 0, 655, 656, 5, 42, 0, 0,
		656, 657, 5, 68, 0, 0, 657, 659, 3, 98, 49, 0, 658, 649, 1, 0, 0, 0, 658,
		655, 1, 0, 0, 0, 659, 79, 1, 0, 0, 0, 660, 661, 3, 82, 41, 0, 661, 662,
		3, 84, 42, 0, 662, 668, 1, 0, 0, 0, 663, 664, 3, 82, 41, 0, 664, 665, 5,
		66, 0, 0, 665, 666, 3, 6, 3, 0, 666, 668, 1, 0, 0, 0, 667, 660, 1, 0, 0,
		0, 667, 663, 1, 0, 0, 0, 668, 81, 1, 0, 0, 0, 669, 670, 5, 42, 0, 0, 670,
		671, 5, 64, 0, 0, 671, 672, 3, 98, 49, 0, 672, 673, 5, 65, 0, 0, 673, 676,
		1, 0, 0, 0, 674, 676, 5, 42, 0, 0, 675, 669, 1, 0, 0, 0, 675, 674, 1, 0,
		0, 0, 676, 83, 1, 0, 0, 0, 677, 678, 5, 66, 0, 0, 678, 679, 5, 42, 0, 0,
		679, 683, 3, 84, 42, 0, 680, 681, 5, 66, 0, 0, 681, 683, 5, 42, 0, 0, 682,
		677, 1, 0, 0, 0, 682, 680, 1, 0, 0, 0, 683, 85, 1, 0, 0, 0, 684, 685, 5,
		35, 0, 0, 685, 686, 5, 60, 0, 0, 686, 687, 3, 48, 24, 0, 687, 688, 5, 61,
		0, 0, 688, 689, 6, 43, -1, 0, 689, 695, 1, 0, 0, 0, 690, 691, 5, 35, 0,
		0, 691, 692, 5, 60, 0, 0, 692, 693, 5, 61, 0, 0, 693, 695, 6, 43, -1, 0,
		694, 684, 1, 0, 0, 0, 694, 690, 1, 0, 0, 0, 695, 87, 1, 0, 0, 0, 696, 697,
		5, 62, 0, 0, 697, 698, 3, 90, 45, 0, 698, 699, 5, 63, 0, 0, 699, 700, 6,
		44, -1, 0, 700, 705, 1, 0, 0, 0, 701, 702, 5, 62, 0, 0, 702, 703, 5, 63,
		0, 0, 703, 705, 6, 44, -1, 0, 704, 696, 1, 0, 0, 0, 704, 701, 1, 0, 0,
		0, 705, 89, 1, 0, 0, 0, 706, 707, 6, 45, -1, 0, 707, 708, 3, 92, 46, 0,
		708, 709, 6, 45, -1, 0, 709, 716, 1, 0, 0, 0, 710, 711, 10, 2, 0, 0, 711,
		712, 3, 92, 46, 0, 712, 713, 6, 45, -1, 0, 713, 715, 1, 0, 0, 0, 714, 710,
		1, 0, 0, 0, 715, 718, 1, 0, 0, 0, 716, 714, 1, 0, 0, 0, 716, 717, 1, 0,
		0, 0, 717, 91, 1, 0, 0, 0, 718, 716, 1, 0, 0, 0, 719, 721, 3, 10, 5, 0,
		720, 722, 5, 69, 0, 0, 721, 720, 1, 0, 0, 0, 721, 722, 1, 0, 0, 0, 722,
		723, 1, 0, 0, 0, 723, 724, 6, 46, -1, 0, 724, 843, 1, 0, 0, 0, 725, 727,
		3, 12, 6, 0, 726, 728, 5, 69, 0, 0, 727, 726, 1, 0, 0, 0, 727, 728, 1,
		0, 0, 0, 728, 729, 1, 0, 0, 0, 729, 730, 6, 46, -1, 0, 730, 843, 1, 0,
		0, 0, 731, 732, 3, 18, 9, 0, 732, 733, 6, 46, -1, 0, 733, 843, 1, 0, 0,
		0, 734, 735, 3, 20, 10, 0, 735, 736, 6, 46, -1, 0, 736, 843, 1, 0, 0, 0,
		737, 738, 3, 32, 16, 0, 738, 739, 6, 46, -1, 0, 739, 843, 1, 0, 0, 0, 740,
		741, 3, 36, 18, 0, 741, 742, 6, 46, -1, 0, 742, 843, 1, 0, 0, 0, 743, 744,
		3, 38, 19, 0, 744, 745, 6, 46, -1, 0, 745, 843, 1, 0, 0, 0, 746, 747, 5,
		34, 0, 0, 747, 749, 5, 66, 0, 0, 748, 746, 1, 0, 0, 0, 748, 749, 1, 0,
		0, 0, 749, 750, 1, 0, 0, 0, 750, 752, 3, 40, 20, 0, 751, 753, 5, 69, 0,
		0, 752, 751, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 754, 1, 0, 0, 0, 754,
		755, 6, 46, -1, 0, 755, 843, 1, 0, 0, 0, 756, 757, 5, 34, 0, 0, 757, 759,
		5, 66, 0, 0, 758, 756, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 760, 1, 0,
		0, 0, 760, 762, 3, 42, 21, 0, 761, 763, 5, 69, 0, 0, 762, 761, 1, 0, 0,
		0, 762, 763, 1, 0, 0, 0, 763, 764, 1, 0, 0, 0, 764, 765, 6, 46, -1, 0,
		765, 843, 1, 0, 0, 0, 766, 768, 3, 44, 22, 0, 767, 769, 5, 69, 0, 0, 768,
		767, 1, 0, 0, 0, 768, 769, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 771,
		6, 46, -1, 0, 771, 843, 1, 0, 0, 0, 772, 774, 3, 50, 25, 0, 773, 775, 5,
		69, 0, 0, 774, 773, 1, 0, 0, 0, 774, 775, 1, 0, 0, 0, 775, 776, 1, 0, 0,
		0, 776, 777, 6, 46, -1, 0, 777, 843, 1, 0, 0, 0, 778, 779, 5, 34, 0, 0,
		779, 781, 5, 66, 0, 0, 780, 778, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781,
		782, 1, 0, 0, 0, 782, 784, 3, 66, 33, 0, 783, 785, 5, 69, 0, 0, 784, 783,
		1, 0, 0, 0, 784, 785, 1, 0, 0, 0, 785, 786, 1, 0, 0, 0, 786, 787, 6, 46,
		-1, 0, 787, 843, 1, 0, 0, 0, 788, 790, 3, 52, 26, 0, 789, 791, 5, 69, 0,
		0, 790, 789, 1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792,
		793, 6, 46, -1, 0, 793, 843, 1, 0, 0, 0, 794, 796, 3, 76, 38, 0, 795, 797,
		5, 69, 0, 0, 796, 795, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 843, 1, 0,
		0, 0, 798, 799, 5, 34, 0, 0, 799, 801, 5, 66, 0, 0, 800, 798, 1, 0, 0,
		0, 800, 801, 1, 0, 0, 0, 801, 802, 1, 0, 0, 0, 802, 804, 3, 80, 40, 0,
		803, 805, 5, 69, 0, 0, 804, 803, 1, 0, 0, 0, 804, 805, 1, 0, 0, 0, 805,
		843, 1, 0, 0, 0, 806, 807, 5, 34, 0, 0, 807, 809, 5, 66, 0, 0, 808, 806,
		1, 0, 0, 0, 808, 809, 1, 0, 0, 0, 809, 810, 1, 0, 0, 0, 810, 812, 3, 6,
		3, 0, 811, 813, 5, 69, 0, 0, 812, 811, 1, 0, 0, 0, 812, 813, 1, 0, 0, 0,
		813, 843, 1, 0, 0, 0, 814, 816, 3, 86, 43, 0, 815, 817, 5, 69, 0, 0, 816,
		815, 1, 0, 0, 0, 816, 817, 1, 0, 0, 0, 817, 818, 1, 0, 0, 0, 818, 819,
		6, 46, -1, 0, 819, 843, 1, 0, 0, 0, 820, 821, 5, 18, 0, 0, 821, 823, 3,
		98, 49, 0, 822, 824, 5, 69, 0, 0, 823, 822, 1, 0, 0, 0, 823, 824, 1, 0,
		0, 0, 824, 825, 1, 0, 0, 0, 825, 826, 6, 46, -1, 0, 826, 843, 1, 0, 0,
		0, 827, 829, 5, 18, 0, 0, 828, 830, 5, 69, 0, 0, 829, 828, 1, 0, 0, 0,
		829, 830, 1, 0, 0, 0, 830, 831, 1, 0, 0, 0, 831, 843, 6, 46, -1, 0, 832,
		834, 5, 17, 0, 0, 833, 835, 5, 69, 0, 0, 834, 833, 1, 0, 0, 0, 834, 835,
		1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 843, 6, 46, -1, 0, 837, 839, 5,
		16, 0, 0, 838, 840, 5, 69, 0, 0, 839, 838, 1, 0, 0, 0, 839, 840, 1, 0,
		0, 0, 840, 841, 1, 0, 0, 0, 841, 843, 6, 46, -1, 0, 842, 719, 1, 0, 0,
		0, 842, 725, 1, 0, 0, 0, 842, 731, 1, 0, 0, 0, 842, 734, 1, 0, 0, 0, 842,
		737, 1, 0, 0, 0, 842, 740, 1, 0, 0, 0, 842, 743, 1, 0, 0, 0, 842, 748,
		1, 0, 0, 0, 842, 758, 1, 0, 0, 0, 842, 766, 1, 0, 0, 0, 842, 772, 1, 0,
		0, 0, 842, 780, 1, 0, 0, 0, 842, 788, 1, 0, 0, 0, 842, 794, 1, 0, 0, 0,
		842, 800, 1, 0, 0, 0, 842, 808, 1, 0, 0, 0, 842, 814, 1, 0, 0, 0, 842,
		820, 1, 0, 0, 0, 842, 827, 1, 0, 0, 0, 842, 832, 1, 0, 0, 0, 842, 837,
		1, 0, 0, 0, 843, 93, 1, 0, 0, 0, 844, 845, 5, 3, 0, 0, 845, 855, 6, 47,
		-1, 0, 846, 847, 5, 1, 0, 0, 847, 855, 6, 47, -1, 0, 848, 849, 5, 4, 0,
		0, 849, 855, 6, 47, -1, 0, 850, 851, 5, 5, 0, 0, 851, 855, 6, 47, -1, 0,
		852, 853, 5, 2, 0, 0, 853, 855, 6, 47, -1, 0, 854, 844, 1, 0, 0, 0, 854,
		846, 1, 0, 0, 0, 854, 848, 1, 0, 0, 0, 854, 850, 1, 0, 0, 0, 854, 852,
		1, 0, 0, 0, 855, 95, 1, 0, 0, 0, 856, 857, 3, 94, 47, 0, 857, 858, 6, 48,
		-1, 0, 858, 862, 1, 0, 0, 0, 859, 860, 5, 42, 0, 0, 860, 862, 6, 48, -1,
		0, 861, 856, 1, 0, 0, 0, 861, 859, 1, 0, 0, 0, 862, 97, 1, 0, 0, 0, 863,
		864, 6, 49, -1, 0, 864, 865, 5, 46, 0, 0, 865, 866, 3, 98, 49, 24, 866,
		867, 6, 49, -1, 0, 867, 918, 1, 0, 0, 0, 868, 869, 5, 59, 0, 0, 869, 870,
		3, 98, 49, 18, 870, 871, 6, 49, -1, 0, 871, 918, 1, 0, 0, 0, 872, 873,
		3, 94, 47, 0, 873, 874, 5, 60, 0, 0, 874, 875, 3, 98, 49, 0, 875, 876,
		5, 61, 0, 0, 876, 877, 6, 49, -1, 0, 877, 918, 1, 0, 0, 0, 878, 879, 5,
		42, 0, 0, 879, 880, 3, 68, 34, 0, 880, 881, 6, 49, -1, 0, 881, 918, 1,
		0, 0, 0, 882, 883, 5, 34, 0, 0, 883, 885, 5, 66, 0, 0, 884, 882, 1, 0,
		0, 0, 884, 885, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 918, 3, 80, 40,
		0, 887, 888, 5, 34, 0, 0, 888, 890, 5, 66, 0, 0, 889, 887, 1, 0, 0, 0,
		889, 890, 1, 0, 0, 0, 890, 891, 1, 0, 0, 0, 891, 918, 3, 6, 3, 0, 892,
		893, 5, 34, 0, 0, 893, 895, 5, 66, 0, 0, 894, 892, 1, 0, 0, 0, 894, 895,
		1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 897, 5, 42, 0, 0, 897, 918, 6, 49,
		-1, 0, 898, 899, 5, 21, 0, 0, 899, 918, 6, 49, -1, 0, 900, 901, 5, 39,
		0, 0, 901, 918, 6, 49, -1, 0, 902, 903, 5, 38, 0, 0, 903, 918, 6, 49, -1,
		0, 904, 905, 5, 40, 0, 0, 905, 918, 6, 49, -1, 0, 906, 907, 5, 41, 0, 0,
		907, 918, 6, 49, -1, 0, 908, 909, 5, 19, 0, 0, 909, 918, 6, 49, -1, 0,
		910, 911, 5, 20, 0, 0, 911, 918, 6, 49, -1, 0, 912, 913, 5, 60, 0, 0, 913,
		914, 3, 98, 49, 0, 914, 915, 5, 61, 0, 0, 915, 916, 6, 49, -1, 0, 916,
		918, 1, 0, 0, 0, 917, 863, 1, 0, 0, 0, 917, 868, 1, 0, 0, 0, 917, 872,
		1, 0, 0, 0, 917, 878, 1, 0, 0, 0, 917, 884, 1, 0, 0, 0, 917, 889, 1, 0,
		0, 0, 917, 894, 1, 0, 0, 0, 917, 898, 1, 0, 0, 0, 917, 900, 1, 0, 0, 0,
		917, 902, 1, 0, 0, 0, 917, 904, 1, 0, 0, 0, 917, 906, 1, 0, 0, 0, 917,
		908, 1, 0, 0, 0, 917, 910, 1, 0, 0, 0, 917, 912, 1, 0, 0, 0, 918, 964,
		1, 0, 0, 0, 919, 920, 10, 23, 0, 0, 920, 921, 7, 3, 0, 0, 921, 922, 3,
		98, 49, 24, 922, 923, 6, 49, -1, 0, 923, 963, 1, 0, 0, 0, 924, 925, 10,
		22, 0, 0, 925, 926, 7, 4, 0, 0, 926, 927, 3, 98, 49, 23, 927, 928, 6, 49,
		-1, 0, 928, 963, 1, 0, 0, 0, 929, 930, 10, 21, 0, 0, 930, 931, 7, 5, 0,
		0, 931, 932, 3, 98, 49, 22, 932, 933, 6, 49, -1, 0, 933, 963, 1, 0, 0,
		0, 934, 935, 10, 20, 0, 0, 935, 936, 7, 6, 0, 0, 936, 937, 3, 98, 49, 21,
		937, 938, 6, 49, -1, 0, 938, 963, 1, 0, 0, 0, 939, 940, 10, 19, 0, 0, 940,
		941, 7, 7, 0, 0, 941, 942, 3, 98, 49, 20, 942, 943, 6, 49, -1, 0, 943,
		963, 1, 0, 0, 0, 944, 945, 10, 17, 0, 0, 945, 946, 5, 57, 0, 0, 946, 947,
		3, 98, 49, 18, 947, 948, 6, 49, -1, 0, 948, 963, 1, 0, 0, 0, 949, 950,
		10, 16, 0, 0, 950, 951, 5, 58, 0, 0, 951, 952, 3, 98, 49, 17, 952, 953,
		6, 49, -1, 0, 953, 963, 1, 0, 0, 0, 954, 955, 10, 13, 0, 0, 955, 956, 5,
		66, 0, 0, 956, 957, 5, 29, 0, 0, 957, 963, 6, 49, -1, 0, 958, 959, 10,
		12, 0, 0, 959, 960, 5, 66, 0, 0, 960, 961, 5, 30, 0, 0, 961, 963, 6, 49,
		-1, 0, 962, 919, 1, 0, 0, 0, 962, 924, 1, 0, 0, 0, 962, 929, 1, 0, 0, 0,
		962, 934, 1, 0, 0, 0, 962, 939, 1, 0, 0, 0, 962, 944, 1, 0, 0, 0, 962,
		949, 1, 0, 0, 0, 962, 954, 1, 0, 0, 0, 962, 958, 1, 0, 0, 0, 963, 966,
		1, 0, 0, 0, 964, 962, 1, 0, 0, 0, 964, 965, 1, 0, 0, 0, 965, 99, 1, 0,
		0, 0, 966, 964, 1, 0, 0, 0, 84, 106, 118, 127, 129, 134, 140, 143, 151,
		154, 157, 180, 196, 227, 230, 235, 242, 247, 250, 271, 286, 298, 310, 324,
		334, 350, 412, 431, 444, 471, 487, 495, 513, 524, 550, 562, 584, 596, 600,
		605, 612, 616, 619, 622, 628, 634, 641, 647, 658, 667, 675, 682, 694, 704,
		716, 721, 727, 748, 752, 758, 762, 768, 774, 780, 784, 790, 796, 800, 804,
		808, 812, 816, 823, 829, 834, 839, 842, 854, 861, 884, 889, 894, 917, 962,
		964,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ParserParserInit initializes any static state used to implement ParserParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewParserParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ParserParserInit() {
	staticData := &ParserParserStaticData
	staticData.once.Do(parserParserInit)
}

// NewParserParser produces a new parser instance for the optional input antlr.TokenStream.
func NewParserParser(input antlr.TokenStream) *ParserParser {
	ParserParserInit()
	this := new(ParserParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "Parser.g4"

	return this
}

// ParserParser tokens.
const (
	ParserParserEOF           = antlr.TokenEOF
	ParserParserRW_Int        = 1
	ParserParserRW_Float      = 2
	ParserParserRW_String     = 3
	ParserParserRW_Bool       = 4
	ParserParserRW_Character  = 5
	ParserParserRW_var        = 6
	ParserParserRW_let        = 7
	ParserParserRW_if         = 8
	ParserParserRW_else       = 9
	ParserParserRW_for        = 10
	ParserParserRW_while      = 11
	ParserParserRW_guard      = 12
	ParserParserRW_switch     = 13
	ParserParserRW_case       = 14
	ParserParserRW_default    = 15
	ParserParserRW_break      = 16
	ParserParserRW_continue   = 17
	ParserParserRW_return     = 18
	ParserParserRW_true       = 19
	ParserParserRW_false      = 20
	ParserParserRW_nil        = 21
	ParserParserRW_func       = 22
	ParserParserRW_inout      = 23
	ParserParserRW_in         = 24
	ParserParserRW_append     = 25
	ParserParserRW_removeLast = 26
	ParserParserRW_remove     = 27
	ParserParserRW_at         = 28
	ParserParserRW_isEmpty    = 29
	ParserParserRW_count      = 30
	ParserParserRW_repeating  = 31
	ParserParserRW_struct     = 32
	ParserParserRW_mutating   = 33
	ParserParserRW_self       = 34
	ParserParserRW_print      = 35
	ParserParserTK_prompt     = 36
	ParserParserTK_under      = 37
	ParserParserTK_char       = 38
	ParserParserTK_string     = 39
	ParserParserTK_int        = 40
	ParserParserTK_float      = 41
	ParserParserTK_id         = 42
	ParserParserTK_add        = 43
	ParserParserTK_sub        = 44
	ParserParserTK_plus       = 45
	ParserParserTK_minus      = 46
	ParserParserTK_mult       = 47
	ParserParserTK_div        = 48
	ParserParserTK_mod        = 49
	ParserParserTK_equequ     = 50
	ParserParserTK_notequ     = 51
	ParserParserTK_lessequ    = 52
	ParserParserTK_moreequ    = 53
	ParserParserTK_equ        = 54
	ParserParserTK_less       = 55
	ParserParserTK_more       = 56
	ParserParserTK_and        = 57
	ParserParserTK_or         = 58
	ParserParserTK_not        = 59
	ParserParserTK_lpar       = 60
	ParserParserTK_rpar       = 61
	ParserParserTK_lbrc       = 62
	ParserParserTK_rbrc       = 63
	ParserParserTK_lbrk       = 64
	ParserParserTK_rbrk       = 65
	ParserParserTK_dot        = 66
	ParserParserTK_comma      = 67
	ParserParserTK_colon      = 68
	ParserParserTK_semicolon  = 69
	ParserParserTK_question   = 70
	ParserParserTK_amp        = 71
	ParserParserNEWLINE       = 72
	ParserParserUNUSED_       = 73
	ParserParserCOMMENTS_     = 74
	ParserParserCOMMENTM_     = 75
	ParserParserERROR         = 76
)

// ParserParser rules.
const (
	ParserParserRULE_init          = 0
	ParserParserRULE_instsglobal   = 1
	ParserParserRULE_instglobal    = 2
	ParserParserRULE_callfunc      = 3
	ParserParserRULE_listargs      = 4
	ParserParserRULE_decvar        = 5
	ParserParserRULE_deccst        = 6
	ParserParserRULE_declfunc      = 7
	ParserParserRULE_listparams    = 8
	ParserParserRULE_ifstruct      = 9
	ParserParserRULE_switchstruct  = 10
	ParserParserRULE_envs          = 11
	ParserParserRULE_casesdefault  = 12
	ParserParserRULE_cases         = 13
	ParserParserRULE_case          = 14
	ParserParserRULE_default       = 15
	ParserParserRULE_loopfor       = 16
	ParserParserRULE_range         = 17
	ParserParserRULE_loopwhile     = 18
	ParserParserRULE_guard         = 19
	ParserParserRULE_reasign       = 20
	ParserParserRULE_addsub        = 21
	ParserParserRULE_decvector     = 22
	ParserParserRULE_defvector     = 23
	ParserParserRULE_listexp       = 24
	ParserParserRULE_funcvector    = 25
	ParserParserRULE_decmatrix     = 26
	ParserParserRULE_defmatrix     = 27
	ParserParserRULE_matrix        = 28
	ParserParserRULE_vectors       = 29
	ParserParserRULE_vector        = 30
	ParserParserRULE_simplematrix  = 31
	ParserParserRULE_typematrix    = 32
	ParserParserRULE_reasignvector = 33
	ParserParserRULE_dims          = 34
	ParserParserRULE_defstruct     = 35
	ParserParserRULE_listattribs   = 36
	ParserParserRULE_attrib        = 37
	ParserParserRULE_decstruct     = 38
	ParserParserRULE_listdupla     = 39
	ParserParserRULE_useattribs    = 40
	ParserParserRULE_obj           = 41
	ParserParserRULE_useattribs1   = 42
	ParserParserRULE_print         = 43
	ParserParserRULE_env           = 44
	ParserParserRULE_instructions  = 45
	ParserParserRULE_instruction   = 46
	ParserParserRULE_type          = 47
	ParserParserRULE_typeComp      = 48
	ParserParserRULE_exp           = 49
)

// IInitContext is an interface to support dynamic dispatch.
type IInitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInsts returns the insts rule contexts.
	GetInsts() IInstsglobalContext

	// SetInsts sets the insts rule contexts.
	SetInsts(IInstsglobalContext)

	// GetResult returns the result attribute.
	GetResult() []interface{}

	// SetResult sets the result attribute.
	SetResult([]interface{})

	// Getter signatures
	EOF() antlr.TerminalNode
	Instsglobal() IInstsglobalContext

	// IsInitContext differentiates from other interfaces.
	IsInitContext()
}

type InitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interface{}
	insts  IInstsglobalContext
}

func NewEmptyInitContext() *InitContext {
	var p = new(InitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_init
	return p
}

func InitEmptyInitContext(p *InitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_init
}

func (*InitContext) IsInitContext() {}

func NewInitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitContext {
	var p = new(InitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_init

	return p
}

func (s *InitContext) GetParser() antlr.Parser { return s.parser }

func (s *InitContext) GetInsts() IInstsglobalContext { return s.insts }

func (s *InitContext) SetInsts(v IInstsglobalContext) { s.insts = v }

func (s *InitContext) GetResult() []interface{} { return s.result }

func (s *InitContext) SetResult(v []interface{}) { s.result = v }

func (s *InitContext) EOF() antlr.TerminalNode {
	return s.GetToken(ParserParserEOF, 0)
}

func (s *InitContext) Instsglobal() IInstsglobalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstsglobalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstsglobalContext)
}

func (s *InitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterInit(s)
	}
}

func (s *InitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitInit(s)
	}
}

func (p *ParserParser) Init() (localctx IInitContext) {
	localctx = NewInitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ParserParserRULE_init)
	p.SetState(106)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ParserParserRW_var, ParserParserRW_let, ParserParserRW_if, ParserParserRW_for, ParserParserRW_while, ParserParserRW_guard, ParserParserRW_switch, ParserParserRW_break, ParserParserRW_continue, ParserParserRW_return, ParserParserRW_func, ParserParserRW_struct, ParserParserRW_self, ParserParserRW_print, ParserParserTK_id:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(100)

			var _x = p.instsglobal(0)

			localctx.(*InitContext).insts = _x
		}
		{
			p.SetState(101)
			p.Match(ParserParserEOF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*InitContext).result = localctx.(*InitContext).GetInsts().GetResult()

	case ParserParserEOF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(104)
			p.Match(ParserParserEOF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*InitContext).result = []interface{}{}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstsglobalContext is an interface to support dynamic dispatch.
type IInstsglobalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() IInstsglobalContext

	// GetI returns the i rule contexts.
	GetI() IInstglobalContext

	// SetL sets the l rule contexts.
	SetL(IInstsglobalContext)

	// SetI sets the i rule contexts.
	SetI(IInstglobalContext)

	// GetResult returns the result attribute.
	GetResult() []interface{}

	// SetResult sets the result attribute.
	SetResult([]interface{})

	// Getter signatures
	Instglobal() IInstglobalContext
	Instsglobal() IInstsglobalContext

	// IsInstsglobalContext differentiates from other interfaces.
	IsInstsglobalContext()
}

type InstsglobalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interface{}
	l      IInstsglobalContext
	i      IInstglobalContext
}

func NewEmptyInstsglobalContext() *InstsglobalContext {
	var p = new(InstsglobalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instsglobal
	return p
}

func InitEmptyInstsglobalContext(p *InstsglobalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instsglobal
}

func (*InstsglobalContext) IsInstsglobalContext() {}

func NewInstsglobalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstsglobalContext {
	var p = new(InstsglobalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_instsglobal

	return p
}

func (s *InstsglobalContext) GetParser() antlr.Parser { return s.parser }

func (s *InstsglobalContext) GetL() IInstsglobalContext { return s.l }

func (s *InstsglobalContext) GetI() IInstglobalContext { return s.i }

func (s *InstsglobalContext) SetL(v IInstsglobalContext) { s.l = v }

func (s *InstsglobalContext) SetI(v IInstglobalContext) { s.i = v }

func (s *InstsglobalContext) GetResult() []interface{} { return s.result }

func (s *InstsglobalContext) SetResult(v []interface{}) { s.result = v }

func (s *InstsglobalContext) Instglobal() IInstglobalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstglobalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstglobalContext)
}

func (s *InstsglobalContext) Instsglobal() IInstsglobalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstsglobalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstsglobalContext)
}

func (s *InstsglobalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstsglobalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstsglobalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterInstsglobal(s)
	}
}

func (s *InstsglobalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitInstsglobal(s)
	}
}

func (p *ParserParser) Instsglobal() (localctx IInstsglobalContext) {
	return p.instsglobal(0)
}

func (p *ParserParser) instsglobal(_p int) (localctx IInstsglobalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewInstsglobalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInstsglobalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 2
	p.EnterRecursionRule(localctx, 2, ParserParserRULE_instsglobal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(109)

		var _x = p.Instglobal()

		localctx.(*InstsglobalContext).i = _x
	}
	localctx.(*InstsglobalContext).result = []interface{}{localctx.(*InstsglobalContext).GetI().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(118)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInstsglobalContext(p, _parentctx, _parentState)
			localctx.(*InstsglobalContext).l = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_instsglobal)
			p.SetState(112)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(113)

				var _x = p.Instglobal()

				localctx.(*InstsglobalContext).i = _x
			}
			localctx.(*InstsglobalContext).SetResult(localctx.(*InstsglobalContext).GetL().GetResult())
			localctx.(*InstsglobalContext).result = append(localctx.(*InstsglobalContext).result, localctx.(*InstsglobalContext).GetI().GetResult())

		}
		p.SetState(120)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstglobalContext is an interface to support dynamic dispatch.
type IInstglobalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInst0 returns the inst0 rule contexts.
	GetInst0() IInstructionContext

	// GetInst1 returns the inst1 rule contexts.
	GetInst1() IDeclfuncContext

	// GetInst2 returns the inst2 rule contexts.
	GetInst2() IDefstructContext

	// SetInst0 sets the inst0 rule contexts.
	SetInst0(IInstructionContext)

	// SetInst1 sets the inst1 rule contexts.
	SetInst1(IDeclfuncContext)

	// SetInst2 sets the inst2 rule contexts.
	SetInst2(IDefstructContext)

	// GetResult returns the result attribute.
	GetResult() interface{}

	// SetResult sets the result attribute.
	SetResult(interface{})

	// Getter signatures
	Instruction() IInstructionContext
	Declfunc() IDeclfuncContext
	Defstruct() IDefstructContext
	TK_semicolon() antlr.TerminalNode

	// IsInstglobalContext differentiates from other interfaces.
	IsInstglobalContext()
}

type InstglobalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interface{}
	inst0  IInstructionContext
	inst1  IDeclfuncContext
	inst2  IDefstructContext
}

func NewEmptyInstglobalContext() *InstglobalContext {
	var p = new(InstglobalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instglobal
	return p
}

func InitEmptyInstglobalContext(p *InstglobalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instglobal
}

func (*InstglobalContext) IsInstglobalContext() {}

func NewInstglobalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstglobalContext {
	var p = new(InstglobalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_instglobal

	return p
}

func (s *InstglobalContext) GetParser() antlr.Parser { return s.parser }

func (s *InstglobalContext) GetInst0() IInstructionContext { return s.inst0 }

func (s *InstglobalContext) GetInst1() IDeclfuncContext { return s.inst1 }

func (s *InstglobalContext) GetInst2() IDefstructContext { return s.inst2 }

func (s *InstglobalContext) SetInst0(v IInstructionContext) { s.inst0 = v }

func (s *InstglobalContext) SetInst1(v IDeclfuncContext) { s.inst1 = v }

func (s *InstglobalContext) SetInst2(v IDefstructContext) { s.inst2 = v }

func (s *InstglobalContext) GetResult() interface{} { return s.result }

func (s *InstglobalContext) SetResult(v interface{}) { s.result = v }

func (s *InstglobalContext) Instruction() IInstructionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionContext)
}

func (s *InstglobalContext) Declfunc() IDeclfuncContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclfuncContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclfuncContext)
}

func (s *InstglobalContext) Defstruct() IDefstructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefstructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefstructContext)
}

func (s *InstglobalContext) TK_semicolon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_semicolon, 0)
}

func (s *InstglobalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstglobalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstglobalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterInstglobal(s)
	}
}

func (s *InstglobalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitInstglobal(s)
	}
}

func (p *ParserParser) Instglobal() (localctx IInstglobalContext) {
	localctx = NewInstglobalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ParserParserRULE_instglobal)
	p.SetState(129)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ParserParserRW_var, ParserParserRW_let, ParserParserRW_if, ParserParserRW_for, ParserParserRW_while, ParserParserRW_guard, ParserParserRW_switch, ParserParserRW_break, ParserParserRW_continue, ParserParserRW_return, ParserParserRW_self, ParserParserRW_print, ParserParserTK_id:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(121)

			var _x = p.Instruction()

			localctx.(*InstglobalContext).inst0 = _x
		}
		localctx.(*InstglobalContext).result = localctx.(*InstglobalContext).GetInst0().GetResult()

	case ParserParserRW_func:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(124)

			var _x = p.Declfunc()

			localctx.(*InstglobalContext).inst1 = _x
		}

	case ParserParserRW_struct:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(125)

			var _x = p.Defstruct()

			localctx.(*InstglobalContext).inst2 = _x
		}
		p.SetState(127)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(126)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICallfuncContext is an interface to support dynamic dispatch.
type ICallfuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TK_id() antlr.TerminalNode
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	Listargs() IListargsContext

	// IsCallfuncContext differentiates from other interfaces.
	IsCallfuncContext()
}

type CallfuncContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallfuncContext() *CallfuncContext {
	var p = new(CallfuncContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_callfunc
	return p
}

func InitEmptyCallfuncContext(p *CallfuncContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_callfunc
}

func (*CallfuncContext) IsCallfuncContext() {}

func NewCallfuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallfuncContext {
	var p = new(CallfuncContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_callfunc

	return p
}

func (s *CallfuncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallfuncContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *CallfuncContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *CallfuncContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *CallfuncContext) Listargs() IListargsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListargsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListargsContext)
}

func (s *CallfuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallfuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallfuncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterCallfunc(s)
	}
}

func (s *CallfuncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitCallfunc(s)
	}
}

func (p *ParserParser) Callfunc() (localctx ICallfuncContext) {
	localctx = NewCallfuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ParserParserRULE_callfunc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(131)
		p.Match(ParserParserTK_id)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(132)
		p.Match(ParserParserTK_lpar)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(134)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1729461164053102654) != 0) || _la == ParserParserTK_amp {
		{
			p.SetState(133)
			p.Listargs()
		}

	}
	{
		p.SetState(136)
		p.Match(ParserParserTK_rpar)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListargsContext is an interface to support dynamic dispatch.
type IListargsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Exp() IExpContext
	TK_comma() antlr.TerminalNode
	Listargs() IListargsContext
	TK_id() antlr.TerminalNode
	TK_colon() antlr.TerminalNode
	TK_amp() antlr.TerminalNode

	// IsListargsContext differentiates from other interfaces.
	IsListargsContext()
}

type ListargsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListargsContext() *ListargsContext {
	var p = new(ListargsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listargs
	return p
}

func InitEmptyListargsContext(p *ListargsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listargs
}

func (*ListargsContext) IsListargsContext() {}

func NewListargsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListargsContext {
	var p = new(ListargsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_listargs

	return p
}

func (s *ListargsContext) GetParser() antlr.Parser { return s.parser }

func (s *ListargsContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ListargsContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *ListargsContext) Listargs() IListargsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListargsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListargsContext)
}

func (s *ListargsContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ListargsContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *ListargsContext) TK_amp() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_amp, 0)
}

func (s *ListargsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListargsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListargsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterListargs(s)
	}
}

func (s *ListargsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitListargs(s)
	}
}

func (p *ParserParser) Listargs() (localctx IListargsContext) {
	localctx = NewListargsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ParserParserRULE_listargs)
	var _la int

	p.SetState(157)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(140)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(138)
				p.Match(ParserParserTK_id)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(139)
				p.Match(ParserParserTK_colon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserTK_amp {
			{
				p.SetState(142)
				p.Match(ParserParserTK_amp)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(145)
			p.exp(0)
		}
		{
			p.SetState(146)
			p.Match(ParserParserTK_comma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(147)
			p.Listargs()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(151)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(149)
				p.Match(ParserParserTK_id)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(150)
				p.Match(ParserParserTK_colon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(154)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserTK_amp {
			{
				p.SetState(153)
				p.Match(ParserParserTK_amp)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(156)
			p.exp(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecvarContext is an interface to support dynamic dispatch.
type IDecvarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d token.
	GetD() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetD sets the d token.
	SetD(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetT returns the t rule contexts.
	GetT() ITypeContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetT sets the t rule contexts.
	SetT(ITypeContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	TK_equ() antlr.TerminalNode
	RW_var() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Type_() ITypeContext
	Exp() IExpContext
	TK_question() antlr.TerminalNode

	// IsDecvarContext differentiates from other interfaces.
	IsDecvarContext()
}

type DecvarContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	d      antlr.Token
	id     antlr.Token
	t      ITypeContext
	e      IExpContext
}

func NewEmptyDecvarContext() *DecvarContext {
	var p = new(DecvarContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decvar
	return p
}

func InitEmptyDecvarContext(p *DecvarContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decvar
}

func (*DecvarContext) IsDecvarContext() {}

func NewDecvarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecvarContext {
	var p = new(DecvarContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_decvar

	return p
}

func (s *DecvarContext) GetParser() antlr.Parser { return s.parser }

func (s *DecvarContext) GetD() antlr.Token { return s.d }

func (s *DecvarContext) GetId() antlr.Token { return s.id }

func (s *DecvarContext) SetD(v antlr.Token) { s.d = v }

func (s *DecvarContext) SetId(v antlr.Token) { s.id = v }

func (s *DecvarContext) GetT() ITypeContext { return s.t }

func (s *DecvarContext) GetE() IExpContext { return s.e }

func (s *DecvarContext) SetT(v ITypeContext) { s.t = v }

func (s *DecvarContext) SetE(v IExpContext) { s.e = v }

func (s *DecvarContext) GetResult() interfaces.Instruction { return s.result }

func (s *DecvarContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *DecvarContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DecvarContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *DecvarContext) RW_var() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_var, 0)
}

func (s *DecvarContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DecvarContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *DecvarContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *DecvarContext) TK_question() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_question, 0)
}

func (s *DecvarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecvarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecvarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDecvar(s)
	}
}

func (s *DecvarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDecvar(s)
	}
}

func (p *ParserParser) Decvar() (localctx IDecvarContext) {
	localctx = NewDecvarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ParserParserRULE_decvar)
	p.SetState(180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(159)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecvarContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(160)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvarContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(161)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(162)

			var _x = p.Type_()

			localctx.(*DecvarContext).t = _x
		}
		{
			p.SetState(163)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(164)

			var _x = p.exp(0)

			localctx.(*DecvarContext).e = _x
		}
		localctx.(*DecvarContext).result = instructions.NewInitID((func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecvarContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvarContext).GetId().GetText()
			}
		}()), localctx.(*DecvarContext).GetT().GetResult().Value.(utils.Type), localctx.(*DecvarContext).GetE().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(167)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecvarContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(168)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvarContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(169)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(170)

			var _x = p.Type_()

			localctx.(*DecvarContext).t = _x
		}
		{
			p.SetState(171)
			p.Match(ParserParserTK_question)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*DecvarContext).result = instructions.NewInitID((func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecvarContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvarContext).GetId().GetText()
			}
		}()), localctx.(*DecvarContext).GetT().GetResult().Value.(utils.Type), nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(174)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecvarContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(175)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvarContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(176)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(177)

			var _x = p.exp(0)

			localctx.(*DecvarContext).e = _x
		}
		localctx.(*DecvarContext).result = instructions.NewInitID((func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvarContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvarContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecvarContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvarContext).GetId().GetText()
			}
		}()), utils.NIL, localctx.(*DecvarContext).GetE().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeccstContext is an interface to support dynamic dispatch.
type IDeccstContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d token.
	GetD() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetD sets the d token.
	SetD(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetT returns the t rule contexts.
	GetT() ITypeContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetT sets the t rule contexts.
	SetT(ITypeContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	TK_equ() antlr.TerminalNode
	RW_let() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Type_() ITypeContext
	Exp() IExpContext

	// IsDeccstContext differentiates from other interfaces.
	IsDeccstContext()
}

type DeccstContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	d      antlr.Token
	id     antlr.Token
	t      ITypeContext
	e      IExpContext
}

func NewEmptyDeccstContext() *DeccstContext {
	var p = new(DeccstContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_deccst
	return p
}

func InitEmptyDeccstContext(p *DeccstContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_deccst
}

func (*DeccstContext) IsDeccstContext() {}

func NewDeccstContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeccstContext {
	var p = new(DeccstContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_deccst

	return p
}

func (s *DeccstContext) GetParser() antlr.Parser { return s.parser }

func (s *DeccstContext) GetD() antlr.Token { return s.d }

func (s *DeccstContext) GetId() antlr.Token { return s.id }

func (s *DeccstContext) SetD(v antlr.Token) { s.d = v }

func (s *DeccstContext) SetId(v antlr.Token) { s.id = v }

func (s *DeccstContext) GetT() ITypeContext { return s.t }

func (s *DeccstContext) GetE() IExpContext { return s.e }

func (s *DeccstContext) SetT(v ITypeContext) { s.t = v }

func (s *DeccstContext) SetE(v IExpContext) { s.e = v }

func (s *DeccstContext) GetResult() interfaces.Instruction { return s.result }

func (s *DeccstContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *DeccstContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DeccstContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *DeccstContext) RW_let() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_let, 0)
}

func (s *DeccstContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DeccstContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *DeccstContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *DeccstContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeccstContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeccstContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDeccst(s)
	}
}

func (s *DeccstContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDeccst(s)
	}
}

func (p *ParserParser) Deccst() (localctx IDeccstContext) {
	localctx = NewDeccstContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ParserParserRULE_deccst)
	p.SetState(196)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(182)

			var _m = p.Match(ParserParserRW_let)

			localctx.(*DeccstContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(183)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DeccstContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(184)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(185)

			var _x = p.Type_()

			localctx.(*DeccstContext).t = _x
		}
		{
			p.SetState(186)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(187)

			var _x = p.exp(0)

			localctx.(*DeccstContext).e = _x
		}
		localctx.(*DeccstContext).result = instructions.NewInitID((func() int {
			if localctx.(*DeccstContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DeccstContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeccstContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DeccstContext).GetD().GetColumn()
			}
		}()), false, (func() string {
			if localctx.(*DeccstContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeccstContext).GetId().GetText()
			}
		}()), localctx.(*DeccstContext).GetT().GetResult().Value.(utils.Type), localctx.(*DeccstContext).GetE().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(190)

			var _m = p.Match(ParserParserRW_let)

			localctx.(*DeccstContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(191)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DeccstContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(192)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(193)

			var _x = p.exp(0)

			localctx.(*DeccstContext).e = _x
		}
		localctx.(*DeccstContext).result = instructions.NewInitID((func() int {
			if localctx.(*DeccstContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DeccstContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DeccstContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DeccstContext).GetD().GetColumn()
			}
		}()), false, (func() string {
			if localctx.(*DeccstContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DeccstContext).GetId().GetText()
			}
		}()), utils.NIL, localctx.(*DeccstContext).GetE().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclfuncContext is an interface to support dynamic dispatch.
type IDeclfuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RW_func() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	TK_lpar() antlr.TerminalNode
	Listparams() IListparamsContext
	TK_rpar() antlr.TerminalNode
	TK_prompt() antlr.TerminalNode
	TypeComp() ITypeCompContext
	Env() IEnvContext

	// IsDeclfuncContext differentiates from other interfaces.
	IsDeclfuncContext()
}

type DeclfuncContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclfuncContext() *DeclfuncContext {
	var p = new(DeclfuncContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_declfunc
	return p
}

func InitEmptyDeclfuncContext(p *DeclfuncContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_declfunc
}

func (*DeclfuncContext) IsDeclfuncContext() {}

func NewDeclfuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclfuncContext {
	var p = new(DeclfuncContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_declfunc

	return p
}

func (s *DeclfuncContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclfuncContext) RW_func() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_func, 0)
}

func (s *DeclfuncContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DeclfuncContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *DeclfuncContext) Listparams() IListparamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListparamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListparamsContext)
}

func (s *DeclfuncContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *DeclfuncContext) TK_prompt() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_prompt, 0)
}

func (s *DeclfuncContext) TypeComp() ITypeCompContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCompContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCompContext)
}

func (s *DeclfuncContext) Env() IEnvContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvContext)
}

func (s *DeclfuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclfuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclfuncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDeclfunc(s)
	}
}

func (s *DeclfuncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDeclfunc(s)
	}
}

func (p *ParserParser) Declfunc() (localctx IDeclfuncContext) {
	localctx = NewDeclfuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ParserParserRULE_declfunc)
	p.SetState(227)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(198)
			p.Match(ParserParserRW_func)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(199)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(200)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(201)
			p.Listparams()
		}
		{
			p.SetState(202)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(203)
			p.Match(ParserParserTK_prompt)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(204)
			p.TypeComp()
		}
		{
			p.SetState(205)
			p.Env()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(207)
			p.Match(ParserParserRW_func)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(208)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(209)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(210)
			p.Listparams()
		}
		{
			p.SetState(211)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(212)
			p.Env()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(214)
			p.Match(ParserParserRW_func)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(215)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(216)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(217)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(218)
			p.Match(ParserParserTK_prompt)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(219)
			p.TypeComp()
		}
		{
			p.SetState(220)
			p.Env()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(222)
			p.Match(ParserParserRW_func)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(223)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(224)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(225)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(226)
			p.Env()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListparamsContext is an interface to support dynamic dispatch.
type IListparamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTK_id() []antlr.TerminalNode
	TK_id(i int) antlr.TerminalNode
	TK_colon() antlr.TerminalNode
	TypeComp() ITypeCompContext
	TK_comma() antlr.TerminalNode
	Listparams() IListparamsContext
	RW_inout() antlr.TerminalNode
	TK_under() antlr.TerminalNode

	// IsListparamsContext differentiates from other interfaces.
	IsListparamsContext()
}

type ListparamsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListparamsContext() *ListparamsContext {
	var p = new(ListparamsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listparams
	return p
}

func InitEmptyListparamsContext(p *ListparamsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listparams
}

func (*ListparamsContext) IsListparamsContext() {}

func NewListparamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListparamsContext {
	var p = new(ListparamsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_listparams

	return p
}

func (s *ListparamsContext) GetParser() antlr.Parser { return s.parser }

func (s *ListparamsContext) AllTK_id() []antlr.TerminalNode {
	return s.GetTokens(ParserParserTK_id)
}

func (s *ListparamsContext) TK_id(i int) antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, i)
}

func (s *ListparamsContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *ListparamsContext) TypeComp() ITypeCompContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCompContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCompContext)
}

func (s *ListparamsContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *ListparamsContext) Listparams() IListparamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListparamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListparamsContext)
}

func (s *ListparamsContext) RW_inout() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_inout, 0)
}

func (s *ListparamsContext) TK_under() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_under, 0)
}

func (s *ListparamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListparamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListparamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterListparams(s)
	}
}

func (s *ListparamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitListparams(s)
	}
}

func (p *ParserParser) Listparams() (localctx IListparamsContext) {
	localctx = NewListparamsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ParserParserRULE_listparams)
	var _la int

	p.SetState(250)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(230)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(229)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ParserParserTK_under || _la == ParserParserTK_id) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(232)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(233)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(235)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_inout {
			{
				p.SetState(234)
				p.Match(ParserParserRW_inout)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(237)
			p.TypeComp()
		}
		{
			p.SetState(238)
			p.Match(ParserParserTK_comma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(239)
			p.Listparams()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(242)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(241)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ParserParserTK_under || _la == ParserParserTK_id) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(244)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(245)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(247)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_inout {
			{
				p.SetState(246)
				p.Match(ParserParserRW_inout)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(249)
			p.TypeComp()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfstructContext is an interface to support dynamic dispatch.
type IIfstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetR returns the r token.
	GetR() antlr.Token

	// SetR sets the r token.
	SetR(antlr.Token)

	// GetCn returns the cn rule contexts.
	GetCn() IExpContext

	// GetB1 returns the b1 rule contexts.
	GetB1() IEnvContext

	// GetB2 returns the b2 rule contexts.
	GetB2() IIfstructContext

	// GetB3 returns the b3 rule contexts.
	GetB3() IEnvContext

	// SetCn sets the cn rule contexts.
	SetCn(IExpContext)

	// SetB1 sets the b1 rule contexts.
	SetB1(IEnvContext)

	// SetB2 sets the b2 rule contexts.
	SetB2(IIfstructContext)

	// SetB3 sets the b3 rule contexts.
	SetB3(IEnvContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	RW_else() antlr.TerminalNode
	RW_if() antlr.TerminalNode
	Exp() IExpContext
	AllEnv() []IEnvContext
	Env(i int) IEnvContext
	Ifstruct() IIfstructContext

	// IsIfstructContext differentiates from other interfaces.
	IsIfstructContext()
}

type IfstructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	r      antlr.Token
	cn     IExpContext
	b1     IEnvContext
	b2     IIfstructContext
	b3     IEnvContext
}

func NewEmptyIfstructContext() *IfstructContext {
	var p = new(IfstructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_ifstruct
	return p
}

func InitEmptyIfstructContext(p *IfstructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_ifstruct
}

func (*IfstructContext) IsIfstructContext() {}

func NewIfstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfstructContext {
	var p = new(IfstructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_ifstruct

	return p
}

func (s *IfstructContext) GetParser() antlr.Parser { return s.parser }

func (s *IfstructContext) GetR() antlr.Token { return s.r }

func (s *IfstructContext) SetR(v antlr.Token) { s.r = v }

func (s *IfstructContext) GetCn() IExpContext { return s.cn }

func (s *IfstructContext) GetB1() IEnvContext { return s.b1 }

func (s *IfstructContext) GetB2() IIfstructContext { return s.b2 }

func (s *IfstructContext) GetB3() IEnvContext { return s.b3 }

func (s *IfstructContext) SetCn(v IExpContext) { s.cn = v }

func (s *IfstructContext) SetB1(v IEnvContext) { s.b1 = v }

func (s *IfstructContext) SetB2(v IIfstructContext) { s.b2 = v }

func (s *IfstructContext) SetB3(v IEnvContext) { s.b3 = v }

func (s *IfstructContext) GetResult() interfaces.Instruction { return s.result }

func (s *IfstructContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *IfstructContext) RW_else() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_else, 0)
}

func (s *IfstructContext) RW_if() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_if, 0)
}

func (s *IfstructContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *IfstructContext) AllEnv() []IEnvContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnvContext); ok {
			len++
		}
	}

	tst := make([]IEnvContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnvContext); ok {
			tst[i] = t.(IEnvContext)
			i++
		}
	}

	return tst
}

func (s *IfstructContext) Env(i int) IEnvContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvContext)
}

func (s *IfstructContext) Ifstruct() IIfstructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfstructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfstructContext)
}

func (s *IfstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterIfstruct(s)
	}
}

func (s *IfstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitIfstruct(s)
	}
}

func (p *ParserParser) Ifstruct() (localctx IIfstructContext) {
	localctx = NewIfstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ParserParserRULE_ifstruct)
	p.SetState(271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(252)

			var _m = p.Match(ParserParserRW_if)

			localctx.(*IfstructContext).r = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(253)

			var _x = p.exp(0)

			localctx.(*IfstructContext).cn = _x
		}
		{
			p.SetState(254)

			var _x = p.Env()

			localctx.(*IfstructContext).b1 = _x
		}
		{
			p.SetState(255)
			p.Match(ParserParserRW_else)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(256)

			var _x = p.Ifstruct()

			localctx.(*IfstructContext).b2 = _x
		}
		localctx.(*IfstructContext).result = instructions.NewIf((func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetLine()
			}
		}()), (func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetColumn()
			}
		}()), localctx.(*IfstructContext).GetCn().GetResult(), localctx.(*IfstructContext).GetB1().GetResult(), localctx.(*IfstructContext).GetB2().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(259)

			var _m = p.Match(ParserParserRW_if)

			localctx.(*IfstructContext).r = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(260)

			var _x = p.exp(0)

			localctx.(*IfstructContext).cn = _x
		}
		{
			p.SetState(261)

			var _x = p.Env()

			localctx.(*IfstructContext).b1 = _x
		}
		{
			p.SetState(262)
			p.Match(ParserParserRW_else)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(263)

			var _x = p.Env()

			localctx.(*IfstructContext).b3 = _x
		}
		localctx.(*IfstructContext).result = instructions.NewIf((func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetLine()
			}
		}()), (func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetColumn()
			}
		}()), localctx.(*IfstructContext).GetCn().GetResult(), localctx.(*IfstructContext).GetB1().GetResult(), (interface{}(localctx.(*IfstructContext).GetB3().GetResult())).(interfaces.Instruction))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(266)

			var _m = p.Match(ParserParserRW_if)

			localctx.(*IfstructContext).r = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(267)

			var _x = p.exp(0)

			localctx.(*IfstructContext).cn = _x
		}
		{
			p.SetState(268)

			var _x = p.Env()

			localctx.(*IfstructContext).b1 = _x
		}
		localctx.(*IfstructContext).result = instructions.NewIf((func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetLine()
			}
		}()), (func() int {
			if localctx.(*IfstructContext).GetR() == nil {
				return 0
			} else {
				return localctx.(*IfstructContext).GetR().GetColumn()
			}
		}()), localctx.(*IfstructContext).GetCn().GetResult(), localctx.(*IfstructContext).GetB1().GetResult(), nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchstructContext is an interface to support dynamic dispatch.
type ISwitchstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetS returns the s token.
	GetS() antlr.Token

	// SetS sets the s token.
	SetS(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// GetB returns the b rule contexts.
	GetB() IEnvsContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// SetB sets the b rule contexts.
	SetB(IEnvsContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	RW_switch() antlr.TerminalNode
	Exp() IExpContext
	Envs() IEnvsContext

	// IsSwitchstructContext differentiates from other interfaces.
	IsSwitchstructContext()
}

type SwitchstructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	s      antlr.Token
	e      IExpContext
	b      IEnvsContext
}

func NewEmptySwitchstructContext() *SwitchstructContext {
	var p = new(SwitchstructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_switchstruct
	return p
}

func InitEmptySwitchstructContext(p *SwitchstructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_switchstruct
}

func (*SwitchstructContext) IsSwitchstructContext() {}

func NewSwitchstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchstructContext {
	var p = new(SwitchstructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_switchstruct

	return p
}

func (s *SwitchstructContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchstructContext) GetS() antlr.Token { return s.s }

func (s *SwitchstructContext) SetS(v antlr.Token) { s.s = v }

func (s *SwitchstructContext) GetE() IExpContext { return s.e }

func (s *SwitchstructContext) GetB() IEnvsContext { return s.b }

func (s *SwitchstructContext) SetE(v IExpContext) { s.e = v }

func (s *SwitchstructContext) SetB(v IEnvsContext) { s.b = v }

func (s *SwitchstructContext) GetResult() interfaces.Instruction { return s.result }

func (s *SwitchstructContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *SwitchstructContext) RW_switch() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_switch, 0)
}

func (s *SwitchstructContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *SwitchstructContext) Envs() IEnvsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvsContext)
}

func (s *SwitchstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterSwitchstruct(s)
	}
}

func (s *SwitchstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitSwitchstruct(s)
	}
}

func (p *ParserParser) Switchstruct() (localctx ISwitchstructContext) {
	localctx = NewSwitchstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ParserParserRULE_switchstruct)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(273)

		var _m = p.Match(ParserParserRW_switch)

		localctx.(*SwitchstructContext).s = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(274)

		var _x = p.exp(0)

		localctx.(*SwitchstructContext).e = _x
	}
	{
		p.SetState(275)

		var _x = p.Envs()

		localctx.(*SwitchstructContext).b = _x
	}
	localctx.(*SwitchstructContext).result = instructions.NewSwitch((func() int {
		if localctx.(*SwitchstructContext).GetS() == nil {
			return 0
		} else {
			return localctx.(*SwitchstructContext).GetS().GetLine()
		}
	}()), (func() int {
		if localctx.(*SwitchstructContext).GetS() == nil {
			return 0
		} else {
			return localctx.(*SwitchstructContext).GetS().GetColumn()
		}
	}()), localctx.(*SwitchstructContext).GetE().GetResult(), localctx.(*SwitchstructContext).GetB().GetResult()[0], localctx.(*SwitchstructContext).GetB().GetResult()[1].(interfaces.Instruction))

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnvsContext is an interface to support dynamic dispatch.
type IEnvsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCd returns the cd rule contexts.
	GetCd() ICasesdefaultContext

	// SetCd sets the cd rule contexts.
	SetCd(ICasesdefaultContext)

	// GetResult returns the result attribute.
	GetResult() []interface{}

	// SetResult sets the result attribute.
	SetResult([]interface{})

	// Getter signatures
	TK_lbrc() antlr.TerminalNode
	TK_rbrc() antlr.TerminalNode
	Casesdefault() ICasesdefaultContext

	// IsEnvsContext differentiates from other interfaces.
	IsEnvsContext()
}

type EnvsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interface{}
	cd     ICasesdefaultContext
}

func NewEmptyEnvsContext() *EnvsContext {
	var p = new(EnvsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_envs
	return p
}

func InitEmptyEnvsContext(p *EnvsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_envs
}

func (*EnvsContext) IsEnvsContext() {}

func NewEnvsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnvsContext {
	var p = new(EnvsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_envs

	return p
}

func (s *EnvsContext) GetParser() antlr.Parser { return s.parser }

func (s *EnvsContext) GetCd() ICasesdefaultContext { return s.cd }

func (s *EnvsContext) SetCd(v ICasesdefaultContext) { s.cd = v }

func (s *EnvsContext) GetResult() []interface{} { return s.result }

func (s *EnvsContext) SetResult(v []interface{}) { s.result = v }

func (s *EnvsContext) TK_lbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrc, 0)
}

func (s *EnvsContext) TK_rbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrc, 0)
}

func (s *EnvsContext) Casesdefault() ICasesdefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICasesdefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICasesdefaultContext)
}

func (s *EnvsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnvsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnvsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterEnvs(s)
	}
}

func (s *EnvsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitEnvs(s)
	}
}

func (p *ParserParser) Envs() (localctx IEnvsContext) {
	localctx = NewEnvsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ParserParserRULE_envs)
	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(278)
			p.Match(ParserParserTK_lbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(279)

			var _x = p.Casesdefault()

			localctx.(*EnvsContext).cd = _x
		}
		{
			p.SetState(280)
			p.Match(ParserParserTK_rbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*EnvsContext).result = localctx.(*EnvsContext).GetCd().GetResult()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(283)
			p.Match(ParserParserTK_lbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(284)
			p.Match(ParserParserTK_rbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*EnvsContext).result = []interface{}{nil, nil}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICasesdefaultContext is an interface to support dynamic dispatch.
type ICasesdefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetC returns the c rule contexts.
	GetC() ICasesContext

	// GetD returns the d rule contexts.
	GetD() IDefaultContext

	// SetC sets the c rule contexts.
	SetC(ICasesContext)

	// SetD sets the d rule contexts.
	SetD(IDefaultContext)

	// GetResult returns the result attribute.
	GetResult() []interface{}

	// SetResult sets the result attribute.
	SetResult([]interface{})

	// Getter signatures
	Cases() ICasesContext
	Default_() IDefaultContext

	// IsCasesdefaultContext differentiates from other interfaces.
	IsCasesdefaultContext()
}

type CasesdefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interface{}
	c      ICasesContext
	d      IDefaultContext
}

func NewEmptyCasesdefaultContext() *CasesdefaultContext {
	var p = new(CasesdefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_casesdefault
	return p
}

func InitEmptyCasesdefaultContext(p *CasesdefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_casesdefault
}

func (*CasesdefaultContext) IsCasesdefaultContext() {}

func NewCasesdefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasesdefaultContext {
	var p = new(CasesdefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_casesdefault

	return p
}

func (s *CasesdefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *CasesdefaultContext) GetC() ICasesContext { return s.c }

func (s *CasesdefaultContext) GetD() IDefaultContext { return s.d }

func (s *CasesdefaultContext) SetC(v ICasesContext) { s.c = v }

func (s *CasesdefaultContext) SetD(v IDefaultContext) { s.d = v }

func (s *CasesdefaultContext) GetResult() []interface{} { return s.result }

func (s *CasesdefaultContext) SetResult(v []interface{}) { s.result = v }

func (s *CasesdefaultContext) Cases() ICasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICasesContext)
}

func (s *CasesdefaultContext) Default_() IDefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefaultContext)
}

func (s *CasesdefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasesdefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CasesdefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterCasesdefault(s)
	}
}

func (s *CasesdefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitCasesdefault(s)
	}
}

func (p *ParserParser) Casesdefault() (localctx ICasesdefaultContext) {
	localctx = NewCasesdefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ParserParserRULE_casesdefault)
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(288)

			var _x = p.cases(0)

			localctx.(*CasesdefaultContext).c = _x
		}
		{
			p.SetState(289)

			var _x = p.Default_()

			localctx.(*CasesdefaultContext).d = _x
		}
		localctx.(*CasesdefaultContext).result = []interface{}{localctx.(*CasesdefaultContext).GetC().GetResult(), localctx.(*CasesdefaultContext).GetD().GetResult()}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(292)

			var _x = p.cases(0)

			localctx.(*CasesdefaultContext).c = _x
		}
		localctx.(*CasesdefaultContext).result = []interface{}{localctx.(*CasesdefaultContext).GetC().GetResult(), nil}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(295)

			var _x = p.Default_()

			localctx.(*CasesdefaultContext).d = _x
		}
		localctx.(*CasesdefaultContext).result = []interface{}{nil, localctx.(*CasesdefaultContext).GetD().GetResult()}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICasesContext is an interface to support dynamic dispatch.
type ICasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() ICasesContext

	// GetC returns the c rule contexts.
	GetC() ICaseContext

	// SetL sets the l rule contexts.
	SetL(ICasesContext)

	// SetC sets the c rule contexts.
	SetC(ICaseContext)

	// GetResult returns the result attribute.
	GetResult() []interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult([]interfaces.Instruction)

	// Getter signatures
	Case_() ICaseContext
	Cases() ICasesContext

	// IsCasesContext differentiates from other interfaces.
	IsCasesContext()
}

type CasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interfaces.Instruction
	l      ICasesContext
	c      ICaseContext
}

func NewEmptyCasesContext() *CasesContext {
	var p = new(CasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_cases
	return p
}

func InitEmptyCasesContext(p *CasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_cases
}

func (*CasesContext) IsCasesContext() {}

func NewCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasesContext {
	var p = new(CasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_cases

	return p
}

func (s *CasesContext) GetParser() antlr.Parser { return s.parser }

func (s *CasesContext) GetL() ICasesContext { return s.l }

func (s *CasesContext) GetC() ICaseContext { return s.c }

func (s *CasesContext) SetL(v ICasesContext) { s.l = v }

func (s *CasesContext) SetC(v ICaseContext) { s.c = v }

func (s *CasesContext) GetResult() []interfaces.Instruction { return s.result }

func (s *CasesContext) SetResult(v []interfaces.Instruction) { s.result = v }

func (s *CasesContext) Case_() ICaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaseContext)
}

func (s *CasesContext) Cases() ICasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICasesContext)
}

func (s *CasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterCases(s)
	}
}

func (s *CasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitCases(s)
	}
}

func (p *ParserParser) Cases() (localctx ICasesContext) {
	return p.cases(0)
}

func (p *ParserParser) cases(_p int) (localctx ICasesContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewCasesContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICasesContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 26
	p.EnterRecursionRule(localctx, 26, ParserParserRULE_cases, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(301)

		var _x = p.Case_()

		localctx.(*CasesContext).c = _x
	}
	localctx.(*CasesContext).result = []interfaces.Instruction{localctx.(*CasesContext).GetC().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(310)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCasesContext(p, _parentctx, _parentState)
			localctx.(*CasesContext).l = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_cases)
			p.SetState(304)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(305)

				var _x = p.Case_()

				localctx.(*CasesContext).c = _x
			}
			localctx.(*CasesContext).SetResult(localctx.(*CasesContext).GetL().GetResult())
			localctx.(*CasesContext).result = append(localctx.(*CasesContext).result, localctx.(*CasesContext).GetC().GetResult())

		}
		p.SetState(312)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaseContext is an interface to support dynamic dispatch.
type ICaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetC returns the c token.
	GetC() antlr.Token

	// SetC sets the c token.
	SetC(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// GetB returns the b rule contexts.
	GetB() IInstructionsContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// SetB sets the b rule contexts.
	SetB(IInstructionsContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	RW_case() antlr.TerminalNode
	Exp() IExpContext
	Instructions() IInstructionsContext

	// IsCaseContext differentiates from other interfaces.
	IsCaseContext()
}

type CaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	c      antlr.Token
	e      IExpContext
	b      IInstructionsContext
}

func NewEmptyCaseContext() *CaseContext {
	var p = new(CaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_case
	return p
}

func InitEmptyCaseContext(p *CaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_case
}

func (*CaseContext) IsCaseContext() {}

func NewCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseContext {
	var p = new(CaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_case

	return p
}

func (s *CaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseContext) GetC() antlr.Token { return s.c }

func (s *CaseContext) SetC(v antlr.Token) { s.c = v }

func (s *CaseContext) GetE() IExpContext { return s.e }

func (s *CaseContext) GetB() IInstructionsContext { return s.b }

func (s *CaseContext) SetE(v IExpContext) { s.e = v }

func (s *CaseContext) SetB(v IInstructionsContext) { s.b = v }

func (s *CaseContext) GetResult() interfaces.Instruction { return s.result }

func (s *CaseContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *CaseContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *CaseContext) RW_case() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_case, 0)
}

func (s *CaseContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *CaseContext) Instructions() IInstructionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionsContext)
}

func (s *CaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterCase(s)
	}
}

func (s *CaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitCase(s)
	}
}

func (p *ParserParser) Case_() (localctx ICaseContext) {
	localctx = NewCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ParserParserRULE_case)
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(313)

			var _m = p.Match(ParserParserRW_case)

			localctx.(*CaseContext).c = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(314)

			var _x = p.exp(0)

			localctx.(*CaseContext).e = _x
		}
		{
			p.SetState(315)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(316)

			var _x = p.instructions(0)

			localctx.(*CaseContext).b = _x
		}
		localctx.(*CaseContext).result = instructions.NewCase((func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetLine()
			}
		}()), (func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetColumn()
			}
		}()), localctx.(*CaseContext).GetE().GetResult(), instructions.NewBlock((func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetLine()
			}
		}()), (func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetColumn()
			}
		}()), localctx.(*CaseContext).GetB().GetResult()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(319)

			var _m = p.Match(ParserParserRW_case)

			localctx.(*CaseContext).c = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(320)

			var _x = p.exp(0)

			localctx.(*CaseContext).e = _x
		}
		{
			p.SetState(321)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*CaseContext).result = instructions.NewCase((func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetLine()
			}
		}()), (func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetColumn()
			}
		}()), localctx.(*CaseContext).GetE().GetResult(), instructions.NewBlock((func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetLine()
			}
		}()), (func() int {
			if localctx.(*CaseContext).GetC() == nil {
				return 0
			} else {
				return localctx.(*CaseContext).GetC().GetColumn()
			}
		}()), []interface{}{}))

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefaultContext is an interface to support dynamic dispatch.
type IDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d token.
	GetD() antlr.Token

	// SetD sets the d token.
	SetD(antlr.Token)

	// GetB returns the b rule contexts.
	GetB() IInstructionsContext

	// SetB sets the b rule contexts.
	SetB(IInstructionsContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	RW_default() antlr.TerminalNode
	Instructions() IInstructionsContext

	// IsDefaultContext differentiates from other interfaces.
	IsDefaultContext()
}

type DefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	d      antlr.Token
	b      IInstructionsContext
}

func NewEmptyDefaultContext() *DefaultContext {
	var p = new(DefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_default
	return p
}

func InitEmptyDefaultContext(p *DefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_default
}

func (*DefaultContext) IsDefaultContext() {}

func NewDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultContext {
	var p = new(DefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_default

	return p
}

func (s *DefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultContext) GetD() antlr.Token { return s.d }

func (s *DefaultContext) SetD(v antlr.Token) { s.d = v }

func (s *DefaultContext) GetB() IInstructionsContext { return s.b }

func (s *DefaultContext) SetB(v IInstructionsContext) { s.b = v }

func (s *DefaultContext) GetResult() interfaces.Instruction { return s.result }

func (s *DefaultContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *DefaultContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DefaultContext) RW_default() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_default, 0)
}

func (s *DefaultContext) Instructions() IInstructionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionsContext)
}

func (s *DefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDefault(s)
	}
}

func (s *DefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDefault(s)
	}
}

func (p *ParserParser) Default_() (localctx IDefaultContext) {
	localctx = NewDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ParserParserRULE_default)
	p.SetState(334)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(326)

			var _m = p.Match(ParserParserRW_default)

			localctx.(*DefaultContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(327)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(328)

			var _x = p.instructions(0)

			localctx.(*DefaultContext).b = _x
		}
		localctx.(*DefaultContext).result = instructions.NewBlock((func() int {
			if localctx.(*DefaultContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DefaultContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DefaultContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DefaultContext).GetD().GetColumn()
			}
		}()), localctx.(*DefaultContext).GetB().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(331)

			var _m = p.Match(ParserParserRW_default)

			localctx.(*DefaultContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(332)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*DefaultContext).result = instructions.NewBlock((func() int {
			if localctx.(*DefaultContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DefaultContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DefaultContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DefaultContext).GetD().GetColumn()
			}
		}()), []interface{}{})

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILoopforContext is an interface to support dynamic dispatch.
type ILoopforContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetF returns the f token.
	GetF() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetF sets the f token.
	SetF(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetR returns the r rule contexts.
	GetR() IRangeContext

	// GetB returns the b rule contexts.
	GetB() IEnvContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetR sets the r rule contexts.
	SetR(IRangeContext)

	// SetB sets the b rule contexts.
	SetB(IEnvContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	RW_in() antlr.TerminalNode
	RW_for() antlr.TerminalNode
	Range_() IRangeContext
	Env() IEnvContext
	TK_id() antlr.TerminalNode
	TK_under() antlr.TerminalNode
	Exp() IExpContext

	// IsLoopforContext differentiates from other interfaces.
	IsLoopforContext()
}

type LoopforContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	f      antlr.Token
	id     antlr.Token
	r      IRangeContext
	b      IEnvContext
	e      IExpContext
}

func NewEmptyLoopforContext() *LoopforContext {
	var p = new(LoopforContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_loopfor
	return p
}

func InitEmptyLoopforContext(p *LoopforContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_loopfor
}

func (*LoopforContext) IsLoopforContext() {}

func NewLoopforContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopforContext {
	var p = new(LoopforContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_loopfor

	return p
}

func (s *LoopforContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopforContext) GetF() antlr.Token { return s.f }

func (s *LoopforContext) GetId() antlr.Token { return s.id }

func (s *LoopforContext) SetF(v antlr.Token) { s.f = v }

func (s *LoopforContext) SetId(v antlr.Token) { s.id = v }

func (s *LoopforContext) GetR() IRangeContext { return s.r }

func (s *LoopforContext) GetB() IEnvContext { return s.b }

func (s *LoopforContext) GetE() IExpContext { return s.e }

func (s *LoopforContext) SetR(v IRangeContext) { s.r = v }

func (s *LoopforContext) SetB(v IEnvContext) { s.b = v }

func (s *LoopforContext) SetE(v IExpContext) { s.e = v }

func (s *LoopforContext) GetResult() interfaces.Instruction { return s.result }

func (s *LoopforContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *LoopforContext) RW_in() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_in, 0)
}

func (s *LoopforContext) RW_for() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_for, 0)
}

func (s *LoopforContext) Range_() IRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeContext)
}

func (s *LoopforContext) Env() IEnvContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvContext)
}

func (s *LoopforContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *LoopforContext) TK_under() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_under, 0)
}

func (s *LoopforContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *LoopforContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopforContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopforContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterLoopfor(s)
	}
}

func (s *LoopforContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitLoopfor(s)
	}
}

func (p *ParserParser) Loopfor() (localctx ILoopforContext) {
	localctx = NewLoopforContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ParserParserRULE_loopfor)
	var _la int

	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(336)

			var _m = p.Match(ParserParserRW_for)

			localctx.(*LoopforContext).f = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(337)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoopforContext).id = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ParserParserTK_under || _la == ParserParserTK_id) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoopforContext).id = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(338)
			p.Match(ParserParserRW_in)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(339)

			var _x = p.Range_()

			localctx.(*LoopforContext).r = _x
		}
		{
			p.SetState(340)

			var _x = p.Env()

			localctx.(*LoopforContext).b = _x
		}
		localctx.(*LoopforContext).result = instructions.NewFor((func() int {
			if localctx.(*LoopforContext).GetF() == nil {
				return 0
			} else {
				return localctx.(*LoopforContext).GetF().GetLine()
			}
		}()), (func() int {
			if localctx.(*LoopforContext).GetF() == nil {
				return 0
			} else {
				return localctx.(*LoopforContext).GetF().GetColumn()
			}
		}()), (func() string {
			if localctx.(*LoopforContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*LoopforContext).GetId().GetText()
			}
		}()), nil, localctx.(*LoopforContext).GetR().GetResult()[0], localctx.(*LoopforContext).GetR().GetResult()[1], localctx.(*LoopforContext).GetB().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(343)

			var _m = p.Match(ParserParserRW_for)

			localctx.(*LoopforContext).f = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(344)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoopforContext).id = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == ParserParserTK_under || _la == ParserParserTK_id) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoopforContext).id = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(345)
			p.Match(ParserParserRW_in)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(346)

			var _x = p.exp(0)

			localctx.(*LoopforContext).e = _x
		}
		{
			p.SetState(347)

			var _x = p.Env()

			localctx.(*LoopforContext).b = _x
		}
		localctx.(*LoopforContext).result = instructions.NewFor((func() int {
			if localctx.(*LoopforContext).GetF() == nil {
				return 0
			} else {
				return localctx.(*LoopforContext).GetF().GetLine()
			}
		}()), (func() int {
			if localctx.(*LoopforContext).GetF() == nil {
				return 0
			} else {
				return localctx.(*LoopforContext).GetF().GetColumn()
			}
		}()), (func() string {
			if localctx.(*LoopforContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*LoopforContext).GetId().GetText()
			}
		}()), localctx.(*LoopforContext).GetE().GetResult(), nil, nil, localctx.(*LoopforContext).GetB().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRangeContext is an interface to support dynamic dispatch.
type IRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetE1 returns the e1 rule contexts.
	GetE1() IExpContext

	// GetE2 returns the e2 rule contexts.
	GetE2() IExpContext

	// SetE1 sets the e1 rule contexts.
	SetE1(IExpContext)

	// SetE2 sets the e2 rule contexts.
	SetE2(IExpContext)

	// GetResult returns the result attribute.
	GetResult() []interfaces.Expression

	// SetResult sets the result attribute.
	SetResult([]interfaces.Expression)

	// Getter signatures
	AllTK_dot() []antlr.TerminalNode
	TK_dot(i int) antlr.TerminalNode
	AllExp() []IExpContext
	Exp(i int) IExpContext

	// IsRangeContext differentiates from other interfaces.
	IsRangeContext()
}

type RangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interfaces.Expression
	e1     IExpContext
	e2     IExpContext
}

func NewEmptyRangeContext() *RangeContext {
	var p = new(RangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_range
	return p
}

func InitEmptyRangeContext(p *RangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_range
}

func (*RangeContext) IsRangeContext() {}

func NewRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeContext {
	var p = new(RangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_range

	return p
}

func (s *RangeContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeContext) GetE1() IExpContext { return s.e1 }

func (s *RangeContext) GetE2() IExpContext { return s.e2 }

func (s *RangeContext) SetE1(v IExpContext) { s.e1 = v }

func (s *RangeContext) SetE2(v IExpContext) { s.e2 = v }

func (s *RangeContext) GetResult() []interfaces.Expression { return s.result }

func (s *RangeContext) SetResult(v []interfaces.Expression) { s.result = v }

func (s *RangeContext) AllTK_dot() []antlr.TerminalNode {
	return s.GetTokens(ParserParserTK_dot)
}

func (s *RangeContext) TK_dot(i int) antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, i)
}

func (s *RangeContext) AllExp() []IExpContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpContext); ok {
			len++
		}
	}

	tst := make([]IExpContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpContext); ok {
			tst[i] = t.(IExpContext)
			i++
		}
	}

	return tst
}

func (s *RangeContext) Exp(i int) IExpContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *RangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterRange(s)
	}
}

func (s *RangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitRange(s)
	}
}

func (p *ParserParser) Range_() (localctx IRangeContext) {
	localctx = NewRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ParserParserRULE_range)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(352)

		var _x = p.exp(0)

		localctx.(*RangeContext).e1 = _x
	}
	{
		p.SetState(353)
		p.Match(ParserParserTK_dot)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(354)
		p.Match(ParserParserTK_dot)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(355)
		p.Match(ParserParserTK_dot)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(356)

		var _x = p.exp(0)

		localctx.(*RangeContext).e2 = _x
	}
	localctx.(*RangeContext).result = []interfaces.Expression{localctx.(*RangeContext).GetE1().GetResult(), localctx.(*RangeContext).GetE2().GetResult()}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILoopwhileContext is an interface to support dynamic dispatch.
type ILoopwhileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetW returns the w token.
	GetW() antlr.Token

	// SetW sets the w token.
	SetW(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// GetB returns the b rule contexts.
	GetB() IEnvContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// SetB sets the b rule contexts.
	SetB(IEnvContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	RW_while() antlr.TerminalNode
	Exp() IExpContext
	Env() IEnvContext

	// IsLoopwhileContext differentiates from other interfaces.
	IsLoopwhileContext()
}

type LoopwhileContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	w      antlr.Token
	e      IExpContext
	b      IEnvContext
}

func NewEmptyLoopwhileContext() *LoopwhileContext {
	var p = new(LoopwhileContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_loopwhile
	return p
}

func InitEmptyLoopwhileContext(p *LoopwhileContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_loopwhile
}

func (*LoopwhileContext) IsLoopwhileContext() {}

func NewLoopwhileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopwhileContext {
	var p = new(LoopwhileContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_loopwhile

	return p
}

func (s *LoopwhileContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopwhileContext) GetW() antlr.Token { return s.w }

func (s *LoopwhileContext) SetW(v antlr.Token) { s.w = v }

func (s *LoopwhileContext) GetE() IExpContext { return s.e }

func (s *LoopwhileContext) GetB() IEnvContext { return s.b }

func (s *LoopwhileContext) SetE(v IExpContext) { s.e = v }

func (s *LoopwhileContext) SetB(v IEnvContext) { s.b = v }

func (s *LoopwhileContext) GetResult() interfaces.Instruction { return s.result }

func (s *LoopwhileContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *LoopwhileContext) RW_while() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_while, 0)
}

func (s *LoopwhileContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *LoopwhileContext) Env() IEnvContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvContext)
}

func (s *LoopwhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopwhileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopwhileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterLoopwhile(s)
	}
}

func (s *LoopwhileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitLoopwhile(s)
	}
}

func (p *ParserParser) Loopwhile() (localctx ILoopwhileContext) {
	localctx = NewLoopwhileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ParserParserRULE_loopwhile)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)

		var _m = p.Match(ParserParserRW_while)

		localctx.(*LoopwhileContext).w = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(360)

		var _x = p.exp(0)

		localctx.(*LoopwhileContext).e = _x
	}
	{
		p.SetState(361)

		var _x = p.Env()

		localctx.(*LoopwhileContext).b = _x
	}
	localctx.(*LoopwhileContext).result = instructions.NewWhile((func() int {
		if localctx.(*LoopwhileContext).GetW() == nil {
			return 0
		} else {
			return localctx.(*LoopwhileContext).GetW().GetLine()
		}
	}()), (func() int {
		if localctx.(*LoopwhileContext).GetW() == nil {
			return 0
		} else {
			return localctx.(*LoopwhileContext).GetW().GetColumn()
		}
	}()), localctx.(*LoopwhileContext).GetE().GetResult(), localctx.(*LoopwhileContext).GetB().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGuardContext is an interface to support dynamic dispatch.
type IGuardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetG returns the g token.
	GetG() antlr.Token

	// SetG sets the g token.
	SetG(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// GetB returns the b rule contexts.
	GetB() IEnvContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// SetB sets the b rule contexts.
	SetB(IEnvContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	RW_else() antlr.TerminalNode
	RW_guard() antlr.TerminalNode
	Exp() IExpContext
	Env() IEnvContext

	// IsGuardContext differentiates from other interfaces.
	IsGuardContext()
}

type GuardContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	g      antlr.Token
	e      IExpContext
	b      IEnvContext
}

func NewEmptyGuardContext() *GuardContext {
	var p = new(GuardContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_guard
	return p
}

func InitEmptyGuardContext(p *GuardContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_guard
}

func (*GuardContext) IsGuardContext() {}

func NewGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GuardContext {
	var p = new(GuardContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_guard

	return p
}

func (s *GuardContext) GetParser() antlr.Parser { return s.parser }

func (s *GuardContext) GetG() antlr.Token { return s.g }

func (s *GuardContext) SetG(v antlr.Token) { s.g = v }

func (s *GuardContext) GetE() IExpContext { return s.e }

func (s *GuardContext) GetB() IEnvContext { return s.b }

func (s *GuardContext) SetE(v IExpContext) { s.e = v }

func (s *GuardContext) SetB(v IEnvContext) { s.b = v }

func (s *GuardContext) GetResult() interfaces.Instruction { return s.result }

func (s *GuardContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *GuardContext) RW_else() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_else, 0)
}

func (s *GuardContext) RW_guard() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_guard, 0)
}

func (s *GuardContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *GuardContext) Env() IEnvContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnvContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnvContext)
}

func (s *GuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GuardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterGuard(s)
	}
}

func (s *GuardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitGuard(s)
	}
}

func (p *ParserParser) Guard() (localctx IGuardContext) {
	localctx = NewGuardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ParserParserRULE_guard)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)

		var _m = p.Match(ParserParserRW_guard)

		localctx.(*GuardContext).g = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(365)

		var _x = p.exp(0)

		localctx.(*GuardContext).e = _x
	}
	{
		p.SetState(366)
		p.Match(ParserParserRW_else)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(367)

		var _x = p.Env()

		localctx.(*GuardContext).b = _x
	}
	localctx.(*GuardContext).result = instructions.NewGuard((func() int {
		if localctx.(*GuardContext).GetG() == nil {
			return 0
		} else {
			return localctx.(*GuardContext).GetG().GetLine()
		}
	}()), (func() int {
		if localctx.(*GuardContext).GetG() == nil {
			return 0
		} else {
			return localctx.(*GuardContext).GetG().GetColumn()
		}
	}()), localctx.(*GuardContext).GetE().GetResult(), localctx.(*GuardContext).GetB().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReasignContext is an interface to support dynamic dispatch.
type IReasignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_equ() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Exp() IExpContext

	// IsReasignContext differentiates from other interfaces.
	IsReasignContext()
}

type ReasignContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	id     antlr.Token
	e      IExpContext
}

func NewEmptyReasignContext() *ReasignContext {
	var p = new(ReasignContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_reasign
	return p
}

func InitEmptyReasignContext(p *ReasignContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_reasign
}

func (*ReasignContext) IsReasignContext() {}

func NewReasignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReasignContext {
	var p = new(ReasignContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_reasign

	return p
}

func (s *ReasignContext) GetParser() antlr.Parser { return s.parser }

func (s *ReasignContext) GetId() antlr.Token { return s.id }

func (s *ReasignContext) SetId(v antlr.Token) { s.id = v }

func (s *ReasignContext) GetE() IExpContext { return s.e }

func (s *ReasignContext) SetE(v IExpContext) { s.e = v }

func (s *ReasignContext) GetResult() interfaces.Instruction { return s.result }

func (s *ReasignContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *ReasignContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *ReasignContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ReasignContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ReasignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReasignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReasignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterReasign(s)
	}
}

func (s *ReasignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitReasign(s)
	}
}

func (p *ParserParser) Reasign() (localctx IReasignContext) {
	localctx = NewReasignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ParserParserRULE_reasign)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(370)

		var _m = p.Match(ParserParserTK_id)

		localctx.(*ReasignContext).id = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(371)
		p.Match(ParserParserTK_equ)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(372)

		var _x = p.exp(0)

		localctx.(*ReasignContext).e = _x
	}
	localctx.(*ReasignContext).result = instructions.NewAsignID((func() int {
		if localctx.(*ReasignContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*ReasignContext).GetId().GetLine()
		}
	}()), (func() int {
		if localctx.(*ReasignContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*ReasignContext).GetId().GetColumn()
		}
	}()), (func() string {
		if localctx.(*ReasignContext).GetId() == nil {
			return ""
		} else {
			return localctx.(*ReasignContext).GetId().GetText()
		}
	}()), localctx.(*ReasignContext).GetE().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAddsubContext is an interface to support dynamic dispatch.
type IAddsubContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// GetS returns the s token.
	GetS() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// SetS sets the s token.
	SetS(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_id() antlr.TerminalNode
	Exp() IExpContext
	TK_add() antlr.TerminalNode
	TK_sub() antlr.TerminalNode

	// IsAddsubContext differentiates from other interfaces.
	IsAddsubContext()
}

type AddsubContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	id     antlr.Token
	s      antlr.Token
	e      IExpContext
}

func NewEmptyAddsubContext() *AddsubContext {
	var p = new(AddsubContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_addsub
	return p
}

func InitEmptyAddsubContext(p *AddsubContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_addsub
}

func (*AddsubContext) IsAddsubContext() {}

func NewAddsubContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddsubContext {
	var p = new(AddsubContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_addsub

	return p
}

func (s *AddsubContext) GetParser() antlr.Parser { return s.parser }

func (s *AddsubContext) GetId() antlr.Token { return s.id }

func (s *AddsubContext) GetS() antlr.Token { return s.s }

func (s *AddsubContext) SetId(v antlr.Token) { s.id = v }

func (s *AddsubContext) SetS(v antlr.Token) { s.s = v }

func (s *AddsubContext) GetE() IExpContext { return s.e }

func (s *AddsubContext) SetE(v IExpContext) { s.e = v }

func (s *AddsubContext) GetResult() interfaces.Instruction { return s.result }

func (s *AddsubContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *AddsubContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *AddsubContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *AddsubContext) TK_add() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_add, 0)
}

func (s *AddsubContext) TK_sub() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_sub, 0)
}

func (s *AddsubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddsubContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddsubContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterAddsub(s)
	}
}

func (s *AddsubContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitAddsub(s)
	}
}

func (p *ParserParser) Addsub() (localctx IAddsubContext) {
	localctx = NewAddsubContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ParserParserRULE_addsub)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(375)

		var _m = p.Match(ParserParserTK_id)

		localctx.(*AddsubContext).id = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(376)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddsubContext).s = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ParserParserTK_add || _la == ParserParserTK_sub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddsubContext).s = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(377)

		var _x = p.exp(0)

		localctx.(*AddsubContext).e = _x
	}
	localctx.(*AddsubContext).result = instructions.NewAddSub((func() int {
		if localctx.(*AddsubContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*AddsubContext).GetId().GetLine()
		}
	}()), (func() int {
		if localctx.(*AddsubContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*AddsubContext).GetId().GetColumn()
		}
	}()), (func() string {
		if localctx.(*AddsubContext).GetId() == nil {
			return ""
		} else {
			return localctx.(*AddsubContext).GetId().GetText()
		}
	}()), (func() string {
		if localctx.(*AddsubContext).GetS() == nil {
			return ""
		} else {
			return localctx.(*AddsubContext).GetS().GetText()
		}
	}()), localctx.(*AddsubContext).GetE().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecvectorContext is an interface to support dynamic dispatch.
type IDecvectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d token.
	GetD() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetD sets the d token.
	SetD(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetT returns the t rule contexts.
	GetT() ITypeCompContext

	// GetDf returns the df rule contexts.
	GetDf() IDefvectorContext

	// SetT sets the t rule contexts.
	SetT(ITypeCompContext)

	// SetDf sets the df rule contexts.
	SetDf(IDefvectorContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	TK_lbrk() antlr.TerminalNode
	TK_rbrk() antlr.TerminalNode
	TK_equ() antlr.TerminalNode
	RW_var() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	TypeComp() ITypeCompContext
	Defvector() IDefvectorContext
	RW_let() antlr.TerminalNode

	// IsDecvectorContext differentiates from other interfaces.
	IsDecvectorContext()
}

type DecvectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	d      antlr.Token
	id     antlr.Token
	t      ITypeCompContext
	df     IDefvectorContext
}

func NewEmptyDecvectorContext() *DecvectorContext {
	var p = new(DecvectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decvector
	return p
}

func InitEmptyDecvectorContext(p *DecvectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decvector
}

func (*DecvectorContext) IsDecvectorContext() {}

func NewDecvectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecvectorContext {
	var p = new(DecvectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_decvector

	return p
}

func (s *DecvectorContext) GetParser() antlr.Parser { return s.parser }

func (s *DecvectorContext) GetD() antlr.Token { return s.d }

func (s *DecvectorContext) GetId() antlr.Token { return s.id }

func (s *DecvectorContext) SetD(v antlr.Token) { s.d = v }

func (s *DecvectorContext) SetId(v antlr.Token) { s.id = v }

func (s *DecvectorContext) GetT() ITypeCompContext { return s.t }

func (s *DecvectorContext) GetDf() IDefvectorContext { return s.df }

func (s *DecvectorContext) SetT(v ITypeCompContext) { s.t = v }

func (s *DecvectorContext) SetDf(v IDefvectorContext) { s.df = v }

func (s *DecvectorContext) GetResult() interfaces.Instruction { return s.result }

func (s *DecvectorContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *DecvectorContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DecvectorContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *DecvectorContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *DecvectorContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *DecvectorContext) RW_var() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_var, 0)
}

func (s *DecvectorContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DecvectorContext) TypeComp() ITypeCompContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCompContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCompContext)
}

func (s *DecvectorContext) Defvector() IDefvectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefvectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefvectorContext)
}

func (s *DecvectorContext) RW_let() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_let, 0)
}

func (s *DecvectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecvectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecvectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDecvector(s)
	}
}

func (s *DecvectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDecvector(s)
	}
}

func (p *ParserParser) Decvector() (localctx IDecvectorContext) {
	localctx = NewDecvectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ParserParserRULE_decvector)
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(380)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecvectorContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(381)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(382)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(383)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(384)

			var _x = p.TypeComp()

			localctx.(*DecvectorContext).t = _x
		}
		{
			p.SetState(385)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(386)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(387)

			var _x = p.Defvector()

			localctx.(*DecvectorContext).df = _x
		}
		attType := localctx.(*DecvectorContext).GetT().GetResult()
		localctx.(*DecvectorContext).SetResult(instructions.NewInitVector((func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvectorContext).GetId().GetText()
			}
		}()), &attType, localctx.(*DecvectorContext).GetDf().GetResult()))

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(390)

			var _m = p.Match(ParserParserRW_let)

			localctx.(*DecvectorContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(391)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(392)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(393)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(394)

			var _x = p.TypeComp()

			localctx.(*DecvectorContext).t = _x
		}
		{
			p.SetState(395)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(396)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(397)

			var _x = p.Defvector()

			localctx.(*DecvectorContext).df = _x
		}
		attType := localctx.(*DecvectorContext).GetT().GetResult()
		localctx.(*DecvectorContext).SetResult(instructions.NewInitVector((func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetColumn()
			}
		}()), false, (func() string {
			if localctx.(*DecvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvectorContext).GetId().GetText()
			}
		}()), &attType, localctx.(*DecvectorContext).GetDf().GetResult()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(400)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecvectorContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(401)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(402)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(403)

			var _x = p.Defvector()

			localctx.(*DecvectorContext).df = _x
		}
		localctx.(*DecvectorContext).SetResult(instructions.NewInitVector((func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvectorContext).GetId().GetText()
			}
		}()), nil, localctx.(*DecvectorContext).GetDf().GetResult()))

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(406)

			var _m = p.Match(ParserParserRW_let)

			localctx.(*DecvectorContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(407)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(408)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(409)

			var _x = p.Defvector()

			localctx.(*DecvectorContext).df = _x
		}
		localctx.(*DecvectorContext).SetResult(instructions.NewInitVector((func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecvectorContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecvectorContext).GetD().GetColumn()
			}
		}()), false, (func() string {
			if localctx.(*DecvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecvectorContext).GetId().GetText()
			}
		}()), nil, localctx.(*DecvectorContext).GetDf().GetResult()))

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefvectorContext is an interface to support dynamic dispatch.
type IDefvectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLb returns the lb token.
	GetLb() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetLb sets the lb token.
	SetLb(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetL returns the l rule contexts.
	GetL() IListexpContext

	// GetT returns the t rule contexts.
	GetT() ITypeCompContext

	// SetL sets the l rule contexts.
	SetL(IListexpContext)

	// SetT sets the t rule contexts.
	SetT(ITypeCompContext)

	// GetResult returns the result attribute.
	GetResult() *vector.Vector

	// SetResult sets the result attribute.
	SetResult(*vector.Vector)

	// Getter signatures
	TK_rbrk() antlr.TerminalNode
	TK_lbrk() antlr.TerminalNode
	Listexp() IListexpContext
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	TypeComp() ITypeCompContext
	TK_id() antlr.TerminalNode

	// IsDefvectorContext differentiates from other interfaces.
	IsDefvectorContext()
}

type DefvectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result *vector.Vector
	lb     antlr.Token
	l      IListexpContext
	t      ITypeCompContext
	id     antlr.Token
}

func NewEmptyDefvectorContext() *DefvectorContext {
	var p = new(DefvectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defvector
	return p
}

func InitEmptyDefvectorContext(p *DefvectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defvector
}

func (*DefvectorContext) IsDefvectorContext() {}

func NewDefvectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefvectorContext {
	var p = new(DefvectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_defvector

	return p
}

func (s *DefvectorContext) GetParser() antlr.Parser { return s.parser }

func (s *DefvectorContext) GetLb() antlr.Token { return s.lb }

func (s *DefvectorContext) GetId() antlr.Token { return s.id }

func (s *DefvectorContext) SetLb(v antlr.Token) { s.lb = v }

func (s *DefvectorContext) SetId(v antlr.Token) { s.id = v }

func (s *DefvectorContext) GetL() IListexpContext { return s.l }

func (s *DefvectorContext) GetT() ITypeCompContext { return s.t }

func (s *DefvectorContext) SetL(v IListexpContext) { s.l = v }

func (s *DefvectorContext) SetT(v ITypeCompContext) { s.t = v }

func (s *DefvectorContext) GetResult() *vector.Vector { return s.result }

func (s *DefvectorContext) SetResult(v *vector.Vector) { s.result = v }

func (s *DefvectorContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *DefvectorContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *DefvectorContext) Listexp() IListexpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListexpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListexpContext)
}

func (s *DefvectorContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *DefvectorContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *DefvectorContext) TypeComp() ITypeCompContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCompContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCompContext)
}

func (s *DefvectorContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DefvectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefvectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefvectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDefvector(s)
	}
}

func (s *DefvectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDefvector(s)
	}
}

func (p *ParserParser) Defvector() (localctx IDefvectorContext) {
	localctx = NewDefvectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ParserParserRULE_defvector)
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(414)

			var _m = p.Match(ParserParserTK_lbrk)

			localctx.(*DefvectorContext).lb = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(415)

			var _x = p.listexp(0)

			localctx.(*DefvectorContext).l = _x
		}
		{
			p.SetState(416)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*DefvectorContext).result = vector.NewVector(nil, localctx.(*DefvectorContext).GetL().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(419)

			var _m = p.Match(ParserParserTK_lbrk)

			localctx.(*DefvectorContext).lb = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(420)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*DefvectorContext).result = vector.NewVector(nil, []interfaces.Expression{})

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(422)

			var _m = p.Match(ParserParserTK_lbrk)

			localctx.(*DefvectorContext).lb = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(423)

			var _x = p.TypeComp()

			localctx.(*DefvectorContext).t = _x
		}
		{
			p.SetState(424)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(425)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(426)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		attType := localctx.(*DefvectorContext).GetT().GetResult()
		localctx.(*DefvectorContext).result = vector.NewVector(&attType, []interfaces.Expression{})

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(429)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DefvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*DefvectorContext).result = vector.NewReuseVector((func() string {
			if localctx.(*DefvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DefvectorContext).GetId().GetText()
			}
		}()))

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListexpContext is an interface to support dynamic dispatch.
type IListexpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() IListexpContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetL sets the l rule contexts.
	SetL(IListexpContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() []interfaces.Expression

	// SetResult sets the result attribute.
	SetResult([]interfaces.Expression)

	// Getter signatures
	Exp() IExpContext
	TK_comma() antlr.TerminalNode
	Listexp() IListexpContext

	// IsListexpContext differentiates from other interfaces.
	IsListexpContext()
}

type ListexpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interfaces.Expression
	l      IListexpContext
	e      IExpContext
}

func NewEmptyListexpContext() *ListexpContext {
	var p = new(ListexpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listexp
	return p
}

func InitEmptyListexpContext(p *ListexpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listexp
}

func (*ListexpContext) IsListexpContext() {}

func NewListexpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListexpContext {
	var p = new(ListexpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_listexp

	return p
}

func (s *ListexpContext) GetParser() antlr.Parser { return s.parser }

func (s *ListexpContext) GetL() IListexpContext { return s.l }

func (s *ListexpContext) GetE() IExpContext { return s.e }

func (s *ListexpContext) SetL(v IListexpContext) { s.l = v }

func (s *ListexpContext) SetE(v IExpContext) { s.e = v }

func (s *ListexpContext) GetResult() []interfaces.Expression { return s.result }

func (s *ListexpContext) SetResult(v []interfaces.Expression) { s.result = v }

func (s *ListexpContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ListexpContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *ListexpContext) Listexp() IListexpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListexpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListexpContext)
}

func (s *ListexpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListexpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListexpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterListexp(s)
	}
}

func (s *ListexpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitListexp(s)
	}
}

func (p *ParserParser) Listexp() (localctx IListexpContext) {
	return p.listexp(0)
}

func (p *ParserParser) listexp(_p int) (localctx IListexpContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewListexpContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListexpContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 48
	p.EnterRecursionRule(localctx, 48, ParserParserRULE_listexp, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)

		var _x = p.exp(0)

		localctx.(*ListexpContext).e = _x
	}
	localctx.(*ListexpContext).result = []interfaces.Expression{localctx.(*ListexpContext).GetE().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListexpContext(p, _parentctx, _parentState)
			localctx.(*ListexpContext).l = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_listexp)
			p.SetState(437)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(438)
				p.Match(ParserParserTK_comma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(439)

				var _x = p.exp(0)

				localctx.(*ListexpContext).e = _x
			}
			localctx.(*ListexpContext).SetResult(localctx.(*ListexpContext).GetL().GetResult())
			localctx.(*ListexpContext).result = append(localctx.(*ListexpContext).result, localctx.(*ListexpContext).GetE().GetResult())

		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFuncvectorContext is an interface to support dynamic dispatch.
type IFuncvectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_dot() antlr.TerminalNode
	RW_append() antlr.TerminalNode
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Exp() IExpContext
	RW_removeLast() antlr.TerminalNode
	RW_remove() antlr.TerminalNode
	RW_at() antlr.TerminalNode
	TK_colon() antlr.TerminalNode

	// IsFuncvectorContext differentiates from other interfaces.
	IsFuncvectorContext()
}

type FuncvectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	id     antlr.Token
	e      IExpContext
}

func NewEmptyFuncvectorContext() *FuncvectorContext {
	var p = new(FuncvectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_funcvector
	return p
}

func InitEmptyFuncvectorContext(p *FuncvectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_funcvector
}

func (*FuncvectorContext) IsFuncvectorContext() {}

func NewFuncvectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncvectorContext {
	var p = new(FuncvectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_funcvector

	return p
}

func (s *FuncvectorContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncvectorContext) GetId() antlr.Token { return s.id }

func (s *FuncvectorContext) SetId(v antlr.Token) { s.id = v }

func (s *FuncvectorContext) GetE() IExpContext { return s.e }

func (s *FuncvectorContext) SetE(v IExpContext) { s.e = v }

func (s *FuncvectorContext) GetResult() interfaces.Instruction { return s.result }

func (s *FuncvectorContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *FuncvectorContext) TK_dot() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, 0)
}

func (s *FuncvectorContext) RW_append() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_append, 0)
}

func (s *FuncvectorContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *FuncvectorContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *FuncvectorContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *FuncvectorContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *FuncvectorContext) RW_removeLast() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_removeLast, 0)
}

func (s *FuncvectorContext) RW_remove() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_remove, 0)
}

func (s *FuncvectorContext) RW_at() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_at, 0)
}

func (s *FuncvectorContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *FuncvectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncvectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncvectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterFuncvector(s)
	}
}

func (s *FuncvectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitFuncvector(s)
	}
}

func (p *ParserParser) Funcvector() (localctx IFuncvectorContext) {
	localctx = NewFuncvectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ParserParserRULE_funcvector)
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(447)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*FuncvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(448)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(449)
			p.Match(ParserParserRW_append)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(450)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(451)

			var _x = p.exp(0)

			localctx.(*FuncvectorContext).e = _x
		}
		{
			p.SetState(452)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*FuncvectorContext).result = instructions.NewAppend((func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetColumn()
			}
		}()), (func() string {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*FuncvectorContext).GetId().GetText()
			}
		}()), localctx.(*FuncvectorContext).GetE().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(455)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*FuncvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(456)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(457)
			p.Match(ParserParserRW_removeLast)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(458)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(459)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*FuncvectorContext).result = instructions.NewRemoveLast((func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetColumn()
			}
		}()), (func() string {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*FuncvectorContext).GetId().GetText()
			}
		}()))

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(461)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*FuncvectorContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(462)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(463)
			p.Match(ParserParserRW_remove)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(464)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(465)
			p.Match(ParserParserRW_at)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(466)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(467)

			var _x = p.exp(0)

			localctx.(*FuncvectorContext).e = _x
		}
		{
			p.SetState(468)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*FuncvectorContext).result = instructions.NewRemove((func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetLine()
			}
		}()), (func() int {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*FuncvectorContext).GetId().GetColumn()
			}
		}()), (func() string {
			if localctx.(*FuncvectorContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*FuncvectorContext).GetId().GetText()
			}
		}()), localctx.(*FuncvectorContext).GetE().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecmatrixContext is an interface to support dynamic dispatch.
type IDecmatrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetD returns the d token.
	GetD() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// SetD sets the d token.
	SetD(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetT returns the t rule contexts.
	GetT() ITypematrixContext

	// GetDf returns the df rule contexts.
	GetDf() IDefmatrixContext

	// SetT sets the t rule contexts.
	SetT(ITypematrixContext)

	// SetDf sets the df rule contexts.
	SetDf(IDefmatrixContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_colon() antlr.TerminalNode
	TK_equ() antlr.TerminalNode
	RW_var() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Typematrix() ITypematrixContext
	Defmatrix() IDefmatrixContext

	// IsDecmatrixContext differentiates from other interfaces.
	IsDecmatrixContext()
}

type DecmatrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	d      antlr.Token
	id     antlr.Token
	t      ITypematrixContext
	df     IDefmatrixContext
}

func NewEmptyDecmatrixContext() *DecmatrixContext {
	var p = new(DecmatrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decmatrix
	return p
}

func InitEmptyDecmatrixContext(p *DecmatrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decmatrix
}

func (*DecmatrixContext) IsDecmatrixContext() {}

func NewDecmatrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecmatrixContext {
	var p = new(DecmatrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_decmatrix

	return p
}

func (s *DecmatrixContext) GetParser() antlr.Parser { return s.parser }

func (s *DecmatrixContext) GetD() antlr.Token { return s.d }

func (s *DecmatrixContext) GetId() antlr.Token { return s.id }

func (s *DecmatrixContext) SetD(v antlr.Token) { s.d = v }

func (s *DecmatrixContext) SetId(v antlr.Token) { s.id = v }

func (s *DecmatrixContext) GetT() ITypematrixContext { return s.t }

func (s *DecmatrixContext) GetDf() IDefmatrixContext { return s.df }

func (s *DecmatrixContext) SetT(v ITypematrixContext) { s.t = v }

func (s *DecmatrixContext) SetDf(v IDefmatrixContext) { s.df = v }

func (s *DecmatrixContext) GetResult() interfaces.Instruction { return s.result }

func (s *DecmatrixContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *DecmatrixContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DecmatrixContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *DecmatrixContext) RW_var() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_var, 0)
}

func (s *DecmatrixContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DecmatrixContext) Typematrix() ITypematrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypematrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypematrixContext)
}

func (s *DecmatrixContext) Defmatrix() IDefmatrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefmatrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefmatrixContext)
}

func (s *DecmatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecmatrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecmatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDecmatrix(s)
	}
}

func (s *DecmatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDecmatrix(s)
	}
}

func (p *ParserParser) Decmatrix() (localctx IDecmatrixContext) {
	localctx = NewDecmatrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ParserParserRULE_decmatrix)
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(473)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecmatrixContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(474)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecmatrixContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(475)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(476)

			var _x = p.Typematrix()

			localctx.(*DecmatrixContext).t = _x
		}
		{
			p.SetState(477)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(478)

			var _x = p.Defmatrix()

			localctx.(*DecmatrixContext).df = _x
		}
		vecType := localctx.(*DecmatrixContext).GetT().GetResult()
		localctx.(*DecmatrixContext).result = instructions.NewInitMatrix((func() int {
			if localctx.(*DecmatrixContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecmatrixContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecmatrixContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecmatrixContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecmatrixContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecmatrixContext).GetId().GetText()
			}
		}()), &vecType, localctx.(*DecmatrixContext).GetDf().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(481)

			var _m = p.Match(ParserParserRW_var)

			localctx.(*DecmatrixContext).d = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(482)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*DecmatrixContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(483)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(484)

			var _x = p.Defmatrix()

			localctx.(*DecmatrixContext).df = _x
		}
		localctx.(*DecmatrixContext).result = instructions.NewInitMatrix((func() int {
			if localctx.(*DecmatrixContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecmatrixContext).GetD().GetLine()
			}
		}()), (func() int {
			if localctx.(*DecmatrixContext).GetD() == nil {
				return 0
			} else {
				return localctx.(*DecmatrixContext).GetD().GetColumn()
			}
		}()), true, (func() string {
			if localctx.(*DecmatrixContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*DecmatrixContext).GetId().GetText()
			}
		}()), nil, localctx.(*DecmatrixContext).GetDf().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefmatrixContext is an interface to support dynamic dispatch.
type IDefmatrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetM returns the m rule contexts.
	GetM() IMatrixContext

	// GetS returns the s rule contexts.
	GetS() ISimplematrixContext

	// SetM sets the m rule contexts.
	SetM(IMatrixContext)

	// SetS sets the s rule contexts.
	SetS(ISimplematrixContext)

	// GetResult returns the result attribute.
	GetResult() *vector.Vector

	// SetResult sets the result attribute.
	SetResult(*vector.Vector)

	// Getter signatures
	Matrix() IMatrixContext
	Simplematrix() ISimplematrixContext

	// IsDefmatrixContext differentiates from other interfaces.
	IsDefmatrixContext()
}

type DefmatrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result *vector.Vector
	m      IMatrixContext
	s      ISimplematrixContext
}

func NewEmptyDefmatrixContext() *DefmatrixContext {
	var p = new(DefmatrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defmatrix
	return p
}

func InitEmptyDefmatrixContext(p *DefmatrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defmatrix
}

func (*DefmatrixContext) IsDefmatrixContext() {}

func NewDefmatrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefmatrixContext {
	var p = new(DefmatrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_defmatrix

	return p
}

func (s *DefmatrixContext) GetParser() antlr.Parser { return s.parser }

func (s *DefmatrixContext) GetM() IMatrixContext { return s.m }

func (s *DefmatrixContext) GetS() ISimplematrixContext { return s.s }

func (s *DefmatrixContext) SetM(v IMatrixContext) { s.m = v }

func (s *DefmatrixContext) SetS(v ISimplematrixContext) { s.s = v }

func (s *DefmatrixContext) GetResult() *vector.Vector { return s.result }

func (s *DefmatrixContext) SetResult(v *vector.Vector) { s.result = v }

func (s *DefmatrixContext) Matrix() IMatrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatrixContext)
}

func (s *DefmatrixContext) Simplematrix() ISimplematrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimplematrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimplematrixContext)
}

func (s *DefmatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefmatrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefmatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDefmatrix(s)
	}
}

func (s *DefmatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDefmatrix(s)
	}
}

func (p *ParserParser) Defmatrix() (localctx IDefmatrixContext) {
	localctx = NewDefmatrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ParserParserRULE_defmatrix)
	p.SetState(495)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(489)

			var _x = p.Matrix()

			localctx.(*DefmatrixContext).m = _x
		}
		localctx.(*DefmatrixContext).result = localctx.(*DefmatrixContext).GetM().GetResult()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(492)

			var _x = p.Simplematrix()

			localctx.(*DefmatrixContext).s = _x
		}
		localctx.(*DefmatrixContext).result = vector.NewMatrixRepeating(localctx.(*DefmatrixContext).GetS().GetResult())

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatrixContext is an interface to support dynamic dispatch.
type IMatrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVs returns the vs rule contexts.
	GetVs() IVectorsContext

	// SetVs sets the vs rule contexts.
	SetVs(IVectorsContext)

	// GetResult returns the result attribute.
	GetResult() *vector.Vector

	// SetResult sets the result attribute.
	SetResult(*vector.Vector)

	// Getter signatures
	TK_lbrk() antlr.TerminalNode
	TK_rbrk() antlr.TerminalNode
	Vectors() IVectorsContext

	// IsMatrixContext differentiates from other interfaces.
	IsMatrixContext()
}

type MatrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result *vector.Vector
	vs     IVectorsContext
}

func NewEmptyMatrixContext() *MatrixContext {
	var p = new(MatrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_matrix
	return p
}

func InitEmptyMatrixContext(p *MatrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_matrix
}

func (*MatrixContext) IsMatrixContext() {}

func NewMatrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatrixContext {
	var p = new(MatrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_matrix

	return p
}

func (s *MatrixContext) GetParser() antlr.Parser { return s.parser }

func (s *MatrixContext) GetVs() IVectorsContext { return s.vs }

func (s *MatrixContext) SetVs(v IVectorsContext) { s.vs = v }

func (s *MatrixContext) GetResult() *vector.Vector { return s.result }

func (s *MatrixContext) SetResult(v *vector.Vector) { s.result = v }

func (s *MatrixContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *MatrixContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *MatrixContext) Vectors() IVectorsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVectorsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVectorsContext)
}

func (s *MatrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterMatrix(s)
	}
}

func (s *MatrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitMatrix(s)
	}
}

func (p *ParserParser) Matrix() (localctx IMatrixContext) {
	localctx = NewMatrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ParserParserRULE_matrix)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(497)
		p.Match(ParserParserTK_lbrk)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(498)

		var _x = p.vectors(0)

		localctx.(*MatrixContext).vs = _x
	}
	{
		p.SetState(499)
		p.Match(ParserParserTK_rbrk)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	localctx.(*MatrixContext).result = vector.NewMatrix(nil, localctx.(*MatrixContext).GetVs().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVectorsContext is an interface to support dynamic dispatch.
type IVectorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVs returns the vs rule contexts.
	GetVs() IVectorsContext

	// GetV returns the v rule contexts.
	GetV() IVectorContext

	// SetVs sets the vs rule contexts.
	SetVs(IVectorsContext)

	// SetV sets the v rule contexts.
	SetV(IVectorContext)

	// GetResult returns the result attribute.
	GetResult() []*vector.Vector

	// SetResult sets the result attribute.
	SetResult([]*vector.Vector)

	// Getter signatures
	Vector() IVectorContext
	TK_comma() antlr.TerminalNode
	Vectors() IVectorsContext

	// IsVectorsContext differentiates from other interfaces.
	IsVectorsContext()
}

type VectorsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []*vector.Vector
	vs     IVectorsContext
	v      IVectorContext
}

func NewEmptyVectorsContext() *VectorsContext {
	var p = new(VectorsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_vectors
	return p
}

func InitEmptyVectorsContext(p *VectorsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_vectors
}

func (*VectorsContext) IsVectorsContext() {}

func NewVectorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VectorsContext {
	var p = new(VectorsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_vectors

	return p
}

func (s *VectorsContext) GetParser() antlr.Parser { return s.parser }

func (s *VectorsContext) GetVs() IVectorsContext { return s.vs }

func (s *VectorsContext) GetV() IVectorContext { return s.v }

func (s *VectorsContext) SetVs(v IVectorsContext) { s.vs = v }

func (s *VectorsContext) SetV(v IVectorContext) { s.v = v }

func (s *VectorsContext) GetResult() []*vector.Vector { return s.result }

func (s *VectorsContext) SetResult(v []*vector.Vector) { s.result = v }

func (s *VectorsContext) Vector() IVectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVectorContext)
}

func (s *VectorsContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *VectorsContext) Vectors() IVectorsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVectorsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVectorsContext)
}

func (s *VectorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VectorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterVectors(s)
	}
}

func (s *VectorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitVectors(s)
	}
}

func (p *ParserParser) Vectors() (localctx IVectorsContext) {
	return p.vectors(0)
}

func (p *ParserParser) vectors(_p int) (localctx IVectorsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewVectorsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVectorsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, ParserParserRULE_vectors, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(503)

		var _x = p.Vector()

		localctx.(*VectorsContext).v = _x
	}
	localctx.(*VectorsContext).result = []*vector.Vector{localctx.(*VectorsContext).GetV().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewVectorsContext(p, _parentctx, _parentState)
			localctx.(*VectorsContext).vs = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_vectors)
			p.SetState(506)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(507)
				p.Match(ParserParserTK_comma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(508)

				var _x = p.Vector()

				localctx.(*VectorsContext).v = _x
			}
			localctx.(*VectorsContext).SetResult(localctx.(*VectorsContext).GetVs().GetResult())
			localctx.(*VectorsContext).result = append(localctx.(*VectorsContext).result, localctx.(*VectorsContext).GetV().GetResult())

		}
		p.SetState(515)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVectorContext is an interface to support dynamic dispatch.
type IVectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() IListexpContext

	// GetM returns the m rule contexts.
	GetM() IMatrixContext

	// SetL sets the l rule contexts.
	SetL(IListexpContext)

	// SetM sets the m rule contexts.
	SetM(IMatrixContext)

	// GetResult returns the result attribute.
	GetResult() *vector.Vector

	// SetResult sets the result attribute.
	SetResult(*vector.Vector)

	// Getter signatures
	TK_lbrk() antlr.TerminalNode
	TK_rbrk() antlr.TerminalNode
	Listexp() IListexpContext
	Matrix() IMatrixContext

	// IsVectorContext differentiates from other interfaces.
	IsVectorContext()
}

type VectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result *vector.Vector
	l      IListexpContext
	m      IMatrixContext
}

func NewEmptyVectorContext() *VectorContext {
	var p = new(VectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_vector
	return p
}

func InitEmptyVectorContext(p *VectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_vector
}

func (*VectorContext) IsVectorContext() {}

func NewVectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VectorContext {
	var p = new(VectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_vector

	return p
}

func (s *VectorContext) GetParser() antlr.Parser { return s.parser }

func (s *VectorContext) GetL() IListexpContext { return s.l }

func (s *VectorContext) GetM() IMatrixContext { return s.m }

func (s *VectorContext) SetL(v IListexpContext) { s.l = v }

func (s *VectorContext) SetM(v IMatrixContext) { s.m = v }

func (s *VectorContext) GetResult() *vector.Vector { return s.result }

func (s *VectorContext) SetResult(v *vector.Vector) { s.result = v }

func (s *VectorContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *VectorContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *VectorContext) Listexp() IListexpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListexpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListexpContext)
}

func (s *VectorContext) Matrix() IMatrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatrixContext)
}

func (s *VectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterVector(s)
	}
}

func (s *VectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitVector(s)
	}
}

func (p *ParserParser) Vector() (localctx IVectorContext) {
	localctx = NewVectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ParserParserRULE_vector)
	p.SetState(524)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(516)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(517)

			var _x = p.listexp(0)

			localctx.(*VectorContext).l = _x
		}
		{
			p.SetState(518)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*VectorContext).result = vector.NewVector(nil, localctx.(*VectorContext).GetL().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(521)

			var _x = p.Matrix()

			localctx.(*VectorContext).m = _x
		}
		localctx.(*VectorContext).result = localctx.(*VectorContext).GetM().GetResult()

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimplematrixContext is an interface to support dynamic dispatch.
type ISimplematrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t rule contexts.
	GetT() ITypematrixContext

	// GetR returns the r rule contexts.
	GetR() ISimplematrixContext

	// GetC returns the c rule contexts.
	GetC() IExpContext

	// GetV returns the v rule contexts.
	GetV() IExpContext

	// SetT sets the t rule contexts.
	SetT(ITypematrixContext)

	// SetR sets the r rule contexts.
	SetR(ISimplematrixContext)

	// SetC sets the c rule contexts.
	SetC(IExpContext)

	// SetV sets the v rule contexts.
	SetV(IExpContext)

	// GetResult returns the result attribute.
	GetResult() *vector.Repeating

	// SetResult sets the result attribute.
	SetResult(*vector.Repeating)

	// Getter signatures
	TK_lpar() antlr.TerminalNode
	RW_repeating() antlr.TerminalNode
	AllTK_colon() []antlr.TerminalNode
	TK_colon(i int) antlr.TerminalNode
	TK_comma() antlr.TerminalNode
	RW_count() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	Typematrix() ITypematrixContext
	Simplematrix() ISimplematrixContext
	AllExp() []IExpContext
	Exp(i int) IExpContext

	// IsSimplematrixContext differentiates from other interfaces.
	IsSimplematrixContext()
}

type SimplematrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result *vector.Repeating
	t      ITypematrixContext
	r      ISimplematrixContext
	c      IExpContext
	v      IExpContext
}

func NewEmptySimplematrixContext() *SimplematrixContext {
	var p = new(SimplematrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_simplematrix
	return p
}

func InitEmptySimplematrixContext(p *SimplematrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_simplematrix
}

func (*SimplematrixContext) IsSimplematrixContext() {}

func NewSimplematrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimplematrixContext {
	var p = new(SimplematrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_simplematrix

	return p
}

func (s *SimplematrixContext) GetParser() antlr.Parser { return s.parser }

func (s *SimplematrixContext) GetT() ITypematrixContext { return s.t }

func (s *SimplematrixContext) GetR() ISimplematrixContext { return s.r }

func (s *SimplematrixContext) GetC() IExpContext { return s.c }

func (s *SimplematrixContext) GetV() IExpContext { return s.v }

func (s *SimplematrixContext) SetT(v ITypematrixContext) { s.t = v }

func (s *SimplematrixContext) SetR(v ISimplematrixContext) { s.r = v }

func (s *SimplematrixContext) SetC(v IExpContext) { s.c = v }

func (s *SimplematrixContext) SetV(v IExpContext) { s.v = v }

func (s *SimplematrixContext) GetResult() *vector.Repeating { return s.result }

func (s *SimplematrixContext) SetResult(v *vector.Repeating) { s.result = v }

func (s *SimplematrixContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *SimplematrixContext) RW_repeating() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_repeating, 0)
}

func (s *SimplematrixContext) AllTK_colon() []antlr.TerminalNode {
	return s.GetTokens(ParserParserTK_colon)
}

func (s *SimplematrixContext) TK_colon(i int) antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, i)
}

func (s *SimplematrixContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *SimplematrixContext) RW_count() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_count, 0)
}

func (s *SimplematrixContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *SimplematrixContext) Typematrix() ITypematrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypematrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypematrixContext)
}

func (s *SimplematrixContext) Simplematrix() ISimplematrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimplematrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimplematrixContext)
}

func (s *SimplematrixContext) AllExp() []IExpContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpContext); ok {
			len++
		}
	}

	tst := make([]IExpContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpContext); ok {
			tst[i] = t.(IExpContext)
			i++
		}
	}

	return tst
}

func (s *SimplematrixContext) Exp(i int) IExpContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *SimplematrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimplematrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimplematrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterSimplematrix(s)
	}
}

func (s *SimplematrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitSimplematrix(s)
	}
}

func (p *ParserParser) Simplematrix() (localctx ISimplematrixContext) {
	localctx = NewSimplematrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ParserParserRULE_simplematrix)
	p.SetState(550)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(526)

			var _x = p.Typematrix()

			localctx.(*SimplematrixContext).t = _x
		}
		{
			p.SetState(527)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(528)
			p.Match(ParserParserRW_repeating)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(529)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(530)

			var _x = p.Simplematrix()

			localctx.(*SimplematrixContext).r = _x
		}
		{
			p.SetState(531)
			p.Match(ParserParserTK_comma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(532)
			p.Match(ParserParserRW_count)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(533)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(534)

			var _x = p.exp(0)

			localctx.(*SimplematrixContext).c = _x
		}
		{
			p.SetState(535)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*SimplematrixContext).result = vector.NewRepeating(localctx.(*SimplematrixContext).GetT().GetResult().Length, localctx.(*SimplematrixContext).GetR().GetResult().Dims+1, localctx.(*SimplematrixContext).GetT().GetResult().Type.Value.(utils.Type), nil, localctx.(*SimplematrixContext).GetC().GetResult(), localctx.(*SimplematrixContext).GetR().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(538)

			var _x = p.Typematrix()

			localctx.(*SimplematrixContext).t = _x
		}
		{
			p.SetState(539)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(540)
			p.Match(ParserParserRW_repeating)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(541)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(542)

			var _x = p.exp(0)

			localctx.(*SimplematrixContext).v = _x
		}
		{
			p.SetState(543)
			p.Match(ParserParserTK_comma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(544)
			p.Match(ParserParserRW_count)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(545)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(546)

			var _x = p.exp(0)

			localctx.(*SimplematrixContext).c = _x
		}
		{
			p.SetState(547)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*SimplematrixContext).result = vector.NewRepeating(localctx.(*SimplematrixContext).GetT().GetResult().Length, 1, localctx.(*SimplematrixContext).GetT().GetResult().Type.Value.(utils.Type), localctx.(*SimplematrixContext).GetV().GetResult(), localctx.(*SimplematrixContext).GetC().GetResult(), nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypematrixContext is an interface to support dynamic dispatch.
type ITypematrixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTm returns the tm rule contexts.
	GetTm() ITypematrixContext

	// GetT returns the t rule contexts.
	GetT() ITypeContext

	// SetTm sets the tm rule contexts.
	SetTm(ITypematrixContext)

	// SetT sets the t rule contexts.
	SetT(ITypeContext)

	// GetResult returns the result attribute.
	GetResult() utils.VectorType

	// SetResult sets the result attribute.
	SetResult(utils.VectorType)

	// Getter signatures
	TK_lbrk() antlr.TerminalNode
	TK_rbrk() antlr.TerminalNode
	Typematrix() ITypematrixContext
	Type_() ITypeContext

	// IsTypematrixContext differentiates from other interfaces.
	IsTypematrixContext()
}

type TypematrixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result utils.VectorType
	tm     ITypematrixContext
	t      ITypeContext
}

func NewEmptyTypematrixContext() *TypematrixContext {
	var p = new(TypematrixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_typematrix
	return p
}

func InitEmptyTypematrixContext(p *TypematrixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_typematrix
}

func (*TypematrixContext) IsTypematrixContext() {}

func NewTypematrixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypematrixContext {
	var p = new(TypematrixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_typematrix

	return p
}

func (s *TypematrixContext) GetParser() antlr.Parser { return s.parser }

func (s *TypematrixContext) GetTm() ITypematrixContext { return s.tm }

func (s *TypematrixContext) GetT() ITypeContext { return s.t }

func (s *TypematrixContext) SetTm(v ITypematrixContext) { s.tm = v }

func (s *TypematrixContext) SetT(v ITypeContext) { s.t = v }

func (s *TypematrixContext) GetResult() utils.VectorType { return s.result }

func (s *TypematrixContext) SetResult(v utils.VectorType) { s.result = v }

func (s *TypematrixContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *TypematrixContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *TypematrixContext) Typematrix() ITypematrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypematrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypematrixContext)
}

func (s *TypematrixContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypematrixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypematrixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypematrixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterTypematrix(s)
	}
}

func (s *TypematrixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitTypematrix(s)
	}
}

func (p *ParserParser) Typematrix() (localctx ITypematrixContext) {
	localctx = NewTypematrixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ParserParserRULE_typematrix)
	p.SetState(562)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(552)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(553)

			var _x = p.Typematrix()

			localctx.(*TypematrixContext).tm = _x
		}
		{
			p.SetState(554)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypematrixContext).SetResult(localctx.(*TypematrixContext).GetTm().GetResult())
		localctx.(*TypematrixContext).result.Length += 1

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(557)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(558)

			var _x = p.Type_()

			localctx.(*TypematrixContext).t = _x
		}
		{
			p.SetState(559)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypematrixContext).result = utils.VectorType{Length: 1, Type: localctx.(*TypematrixContext).GetT().GetResult()}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReasignvectorContext is an interface to support dynamic dispatch.
type IReasignvectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetIndex returns the index rule contexts.
	GetIndex() IDimsContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetIndex sets the index rule contexts.
	SetIndex(IDimsContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_equ() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Dims() IDimsContext
	Exp() IExpContext

	// IsReasignvectorContext differentiates from other interfaces.
	IsReasignvectorContext()
}

type ReasignvectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	id     antlr.Token
	index  IDimsContext
	e      IExpContext
}

func NewEmptyReasignvectorContext() *ReasignvectorContext {
	var p = new(ReasignvectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_reasignvector
	return p
}

func InitEmptyReasignvectorContext(p *ReasignvectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_reasignvector
}

func (*ReasignvectorContext) IsReasignvectorContext() {}

func NewReasignvectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReasignvectorContext {
	var p = new(ReasignvectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_reasignvector

	return p
}

func (s *ReasignvectorContext) GetParser() antlr.Parser { return s.parser }

func (s *ReasignvectorContext) GetId() antlr.Token { return s.id }

func (s *ReasignvectorContext) SetId(v antlr.Token) { s.id = v }

func (s *ReasignvectorContext) GetIndex() IDimsContext { return s.index }

func (s *ReasignvectorContext) GetE() IExpContext { return s.e }

func (s *ReasignvectorContext) SetIndex(v IDimsContext) { s.index = v }

func (s *ReasignvectorContext) SetE(v IExpContext) { s.e = v }

func (s *ReasignvectorContext) GetResult() interfaces.Instruction { return s.result }

func (s *ReasignvectorContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *ReasignvectorContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *ReasignvectorContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ReasignvectorContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *ReasignvectorContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ReasignvectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReasignvectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReasignvectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterReasignvector(s)
	}
}

func (s *ReasignvectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitReasignvector(s)
	}
}

func (p *ParserParser) Reasignvector() (localctx IReasignvectorContext) {
	localctx = NewReasignvectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ParserParserRULE_reasignvector)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)

		var _m = p.Match(ParserParserTK_id)

		localctx.(*ReasignvectorContext).id = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(565)

		var _x = p.dims(0)

		localctx.(*ReasignvectorContext).index = _x
	}
	{
		p.SetState(566)
		p.Match(ParserParserTK_equ)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(567)

		var _x = p.exp(0)

		localctx.(*ReasignvectorContext).e = _x
	}
	localctx.(*ReasignvectorContext).result = instructions.NewAsignPosArray((func() int {
		if localctx.(*ReasignvectorContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*ReasignvectorContext).GetId().GetLine()
		}
	}()), (func() int {
		if localctx.(*ReasignvectorContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*ReasignvectorContext).GetId().GetColumn()
		}
	}()), (func() string {
		if localctx.(*ReasignvectorContext).GetId() == nil {
			return ""
		} else {
			return localctx.(*ReasignvectorContext).GetId().GetText()
		}
	}()), localctx.(*ReasignvectorContext).GetIndex().GetResult(), localctx.(*ReasignvectorContext).GetE().GetResult())

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDimsContext is an interface to support dynamic dispatch.
type IDimsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() IDimsContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetL sets the l rule contexts.
	SetL(IDimsContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() []interfaces.Expression

	// SetResult sets the result attribute.
	SetResult([]interfaces.Expression)

	// Getter signatures
	TK_lbrk() antlr.TerminalNode
	TK_rbrk() antlr.TerminalNode
	Exp() IExpContext
	Dims() IDimsContext

	// IsDimsContext differentiates from other interfaces.
	IsDimsContext()
}

type DimsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interfaces.Expression
	l      IDimsContext
	e      IExpContext
}

func NewEmptyDimsContext() *DimsContext {
	var p = new(DimsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_dims
	return p
}

func InitEmptyDimsContext(p *DimsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_dims
}

func (*DimsContext) IsDimsContext() {}

func NewDimsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DimsContext {
	var p = new(DimsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_dims

	return p
}

func (s *DimsContext) GetParser() antlr.Parser { return s.parser }

func (s *DimsContext) GetL() IDimsContext { return s.l }

func (s *DimsContext) GetE() IExpContext { return s.e }

func (s *DimsContext) SetL(v IDimsContext) { s.l = v }

func (s *DimsContext) SetE(v IExpContext) { s.e = v }

func (s *DimsContext) GetResult() []interfaces.Expression { return s.result }

func (s *DimsContext) SetResult(v []interfaces.Expression) { s.result = v }

func (s *DimsContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *DimsContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *DimsContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *DimsContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *DimsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DimsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDims(s)
	}
}

func (s *DimsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDims(s)
	}
}

func (p *ParserParser) Dims() (localctx IDimsContext) {
	return p.dims(0)
}

func (p *ParserParser) dims(_p int) (localctx IDimsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewDimsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDimsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, ParserParserRULE_dims, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(571)
		p.Match(ParserParserTK_lbrk)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(572)

		var _x = p.exp(0)

		localctx.(*DimsContext).e = _x
	}
	{
		p.SetState(573)
		p.Match(ParserParserTK_rbrk)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	localctx.(*DimsContext).result = []interfaces.Expression{localctx.(*DimsContext).GetE().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(584)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDimsContext(p, _parentctx, _parentState)
			localctx.(*DimsContext).l = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_dims)
			p.SetState(576)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(577)
				p.Match(ParserParserTK_lbrk)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(578)

				var _x = p.exp(0)

				localctx.(*DimsContext).e = _x
			}
			{
				p.SetState(579)
				p.Match(ParserParserTK_rbrk)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			localctx.(*DimsContext).SetResult(localctx.(*DimsContext).GetL().GetResult())
			localctx.(*DimsContext).result = append(localctx.(*DimsContext).result, localctx.(*DimsContext).GetE().GetResult())

		}
		p.SetState(586)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefstructContext is an interface to support dynamic dispatch.
type IDefstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RW_struct() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	TK_lbrc() antlr.TerminalNode
	Listattribs() IListattribsContext
	TK_rbrc() antlr.TerminalNode

	// IsDefstructContext differentiates from other interfaces.
	IsDefstructContext()
}

type DefstructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefstructContext() *DefstructContext {
	var p = new(DefstructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defstruct
	return p
}

func InitEmptyDefstructContext(p *DefstructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_defstruct
}

func (*DefstructContext) IsDefstructContext() {}

func NewDefstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefstructContext {
	var p = new(DefstructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_defstruct

	return p
}

func (s *DefstructContext) GetParser() antlr.Parser { return s.parser }

func (s *DefstructContext) RW_struct() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_struct, 0)
}

func (s *DefstructContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *DefstructContext) TK_lbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrc, 0)
}

func (s *DefstructContext) Listattribs() IListattribsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListattribsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListattribsContext)
}

func (s *DefstructContext) TK_rbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrc, 0)
}

func (s *DefstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDefstruct(s)
	}
}

func (s *DefstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDefstruct(s)
	}
}

func (p *ParserParser) Defstruct() (localctx IDefstructContext) {
	localctx = NewDefstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ParserParserRULE_defstruct)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(587)
		p.Match(ParserParserRW_struct)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(588)
		p.Match(ParserParserTK_id)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(589)
		p.Match(ParserParserTK_lbrc)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(590)
		p.listattribs(0)
	}
	{
		p.SetState(591)
		p.Match(ParserParserTK_rbrc)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListattribsContext is an interface to support dynamic dispatch.
type IListattribsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Attrib() IAttribContext
	TK_semicolon() antlr.TerminalNode
	Listattribs() IListattribsContext

	// IsListattribsContext differentiates from other interfaces.
	IsListattribsContext()
}

type ListattribsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListattribsContext() *ListattribsContext {
	var p = new(ListattribsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listattribs
	return p
}

func InitEmptyListattribsContext(p *ListattribsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listattribs
}

func (*ListattribsContext) IsListattribsContext() {}

func NewListattribsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListattribsContext {
	var p = new(ListattribsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_listattribs

	return p
}

func (s *ListattribsContext) GetParser() antlr.Parser { return s.parser }

func (s *ListattribsContext) Attrib() IAttribContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttribContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttribContext)
}

func (s *ListattribsContext) TK_semicolon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_semicolon, 0)
}

func (s *ListattribsContext) Listattribs() IListattribsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListattribsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListattribsContext)
}

func (s *ListattribsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListattribsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListattribsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterListattribs(s)
	}
}

func (s *ListattribsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitListattribs(s)
	}
}

func (p *ParserParser) Listattribs() (localctx IListattribsContext) {
	return p.listattribs(0)
}

func (p *ParserParser) listattribs(_p int) (localctx IListattribsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewListattribsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IListattribsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 72
	p.EnterRecursionRule(localctx, 72, ParserParserRULE_listattribs, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.Attrib()
	}
	p.SetState(596)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(595)
			p.Match(ParserParserTK_semicolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 38, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewListattribsContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_listattribs)
			p.SetState(598)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			p.SetState(600)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ParserParserTK_semicolon {
				{
					p.SetState(599)
					p.Match(ParserParserTK_semicolon)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(602)
				p.Attrib()
			}

		}
		p.SetState(607)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 38, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttribContext is an interface to support dynamic dispatch.
type IAttribContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TK_id() antlr.TerminalNode
	RW_let() antlr.TerminalNode
	RW_var() antlr.TerminalNode
	TK_colon() antlr.TerminalNode
	TypeComp() ITypeCompContext
	TK_equ() antlr.TerminalNode
	Exp() IExpContext
	Declfunc() IDeclfuncContext
	RW_mutating() antlr.TerminalNode

	// IsAttribContext differentiates from other interfaces.
	IsAttribContext()
}

type AttribContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttribContext() *AttribContext {
	var p = new(AttribContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_attrib
	return p
}

func InitEmptyAttribContext(p *AttribContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_attrib
}

func (*AttribContext) IsAttribContext() {}

func NewAttribContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttribContext {
	var p = new(AttribContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_attrib

	return p
}

func (s *AttribContext) GetParser() antlr.Parser { return s.parser }

func (s *AttribContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *AttribContext) RW_let() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_let, 0)
}

func (s *AttribContext) RW_var() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_var, 0)
}

func (s *AttribContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *AttribContext) TypeComp() ITypeCompContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCompContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCompContext)
}

func (s *AttribContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *AttribContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *AttribContext) Declfunc() IDeclfuncContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclfuncContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclfuncContext)
}

func (s *AttribContext) RW_mutating() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_mutating, 0)
}

func (s *AttribContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttribContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttribContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterAttrib(s)
	}
}

func (s *AttribContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitAttrib(s)
	}
}

func (p *ParserParser) Attrib() (localctx IAttribContext) {
	localctx = NewAttribContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ParserParserRULE_attrib)
	var _la int

	p.SetState(622)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ParserParserRW_var, ParserParserRW_let:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(608)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ParserParserRW_var || _la == ParserParserRW_let) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(609)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(612)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(610)
				p.Match(ParserParserTK_colon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(611)
				p.TypeComp()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(616)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(614)
				p.Match(ParserParserTK_equ)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(615)
				p.exp(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case ParserParserRW_func, ParserParserRW_mutating:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(619)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_mutating {
			{
				p.SetState(618)
				p.Match(ParserParserRW_mutating)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(621)
			p.Declfunc()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecstructContext is an interface to support dynamic dispatch.
type IDecstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTK_id() []antlr.TerminalNode
	TK_id(i int) antlr.TerminalNode
	TK_equ() antlr.TerminalNode
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	RW_let() antlr.TerminalNode
	RW_var() antlr.TerminalNode
	TK_colon() antlr.TerminalNode
	Listdupla() IListduplaContext

	// IsDecstructContext differentiates from other interfaces.
	IsDecstructContext()
}

type DecstructContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecstructContext() *DecstructContext {
	var p = new(DecstructContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decstruct
	return p
}

func InitEmptyDecstructContext(p *DecstructContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_decstruct
}

func (*DecstructContext) IsDecstructContext() {}

func NewDecstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecstructContext {
	var p = new(DecstructContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_decstruct

	return p
}

func (s *DecstructContext) GetParser() antlr.Parser { return s.parser }

func (s *DecstructContext) AllTK_id() []antlr.TerminalNode {
	return s.GetTokens(ParserParserTK_id)
}

func (s *DecstructContext) TK_id(i int) antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, i)
}

func (s *DecstructContext) TK_equ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equ, 0)
}

func (s *DecstructContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *DecstructContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *DecstructContext) RW_let() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_let, 0)
}

func (s *DecstructContext) RW_var() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_var, 0)
}

func (s *DecstructContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *DecstructContext) Listdupla() IListduplaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListduplaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListduplaContext)
}

func (s *DecstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterDecstruct(s)
	}
}

func (s *DecstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitDecstruct(s)
	}
}

func (p *ParserParser) Decstruct() (localctx IDecstructContext) {
	localctx = NewDecstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ParserParserRULE_decstruct)
	var _la int

	p.SetState(647)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(624)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ParserParserRW_var || _la == ParserParserRW_let) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(625)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserTK_colon {
			{
				p.SetState(626)
				p.Match(ParserParserTK_colon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(627)
				p.Match(ParserParserTK_id)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(630)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(631)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(632)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserTK_id {
			{
				p.SetState(633)
				p.Listdupla()
			}

		}
		{
			p.SetState(636)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(637)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ParserParserRW_var || _la == ParserParserRW_let) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(638)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserTK_colon {
			{
				p.SetState(639)
				p.Match(ParserParserTK_colon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(640)
				p.Match(ParserParserTK_id)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(643)
			p.Match(ParserParserTK_equ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(644)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(645)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(646)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListduplaContext is an interface to support dynamic dispatch.
type IListduplaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TK_id() antlr.TerminalNode
	TK_colon() antlr.TerminalNode
	Exp() IExpContext
	TK_comma() antlr.TerminalNode
	Listdupla() IListduplaContext

	// IsListduplaContext differentiates from other interfaces.
	IsListduplaContext()
}

type ListduplaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListduplaContext() *ListduplaContext {
	var p = new(ListduplaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listdupla
	return p
}

func InitEmptyListduplaContext(p *ListduplaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_listdupla
}

func (*ListduplaContext) IsListduplaContext() {}

func NewListduplaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListduplaContext {
	var p = new(ListduplaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_listdupla

	return p
}

func (s *ListduplaContext) GetParser() antlr.Parser { return s.parser }

func (s *ListduplaContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ListduplaContext) TK_colon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_colon, 0)
}

func (s *ListduplaContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ListduplaContext) TK_comma() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_comma, 0)
}

func (s *ListduplaContext) Listdupla() IListduplaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListduplaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListduplaContext)
}

func (s *ListduplaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListduplaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListduplaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterListdupla(s)
	}
}

func (s *ListduplaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitListdupla(s)
	}
}

func (p *ParserParser) Listdupla() (localctx IListduplaContext) {
	localctx = NewListduplaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ParserParserRULE_listdupla)
	p.SetState(658)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(649)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(650)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(651)
			p.exp(0)
		}
		{
			p.SetState(652)
			p.Match(ParserParserTK_comma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(653)
			p.Listdupla()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(655)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(656)
			p.Match(ParserParserTK_colon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(657)
			p.exp(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUseattribsContext is an interface to support dynamic dispatch.
type IUseattribsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Obj() IObjContext
	Useattribs1() IUseattribs1Context
	TK_dot() antlr.TerminalNode
	Callfunc() ICallfuncContext

	// IsUseattribsContext differentiates from other interfaces.
	IsUseattribsContext()
}

type UseattribsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseattribsContext() *UseattribsContext {
	var p = new(UseattribsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_useattribs
	return p
}

func InitEmptyUseattribsContext(p *UseattribsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_useattribs
}

func (*UseattribsContext) IsUseattribsContext() {}

func NewUseattribsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseattribsContext {
	var p = new(UseattribsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_useattribs

	return p
}

func (s *UseattribsContext) GetParser() antlr.Parser { return s.parser }

func (s *UseattribsContext) Obj() IObjContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjContext)
}

func (s *UseattribsContext) Useattribs1() IUseattribs1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseattribs1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseattribs1Context)
}

func (s *UseattribsContext) TK_dot() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, 0)
}

func (s *UseattribsContext) Callfunc() ICallfuncContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallfuncContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallfuncContext)
}

func (s *UseattribsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseattribsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseattribsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterUseattribs(s)
	}
}

func (s *UseattribsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitUseattribs(s)
	}
}

func (p *ParserParser) Useattribs() (localctx IUseattribsContext) {
	localctx = NewUseattribsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ParserParserRULE_useattribs)
	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(660)
			p.Obj()
		}
		{
			p.SetState(661)
			p.Useattribs1()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(663)
			p.Obj()
		}
		{
			p.SetState(664)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(665)
			p.Callfunc()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjContext is an interface to support dynamic dispatch.
type IObjContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TK_id() antlr.TerminalNode
	TK_lbrk() antlr.TerminalNode
	Exp() IExpContext
	TK_rbrk() antlr.TerminalNode

	// IsObjContext differentiates from other interfaces.
	IsObjContext()
}

type ObjContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjContext() *ObjContext {
	var p = new(ObjContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_obj
	return p
}

func InitEmptyObjContext(p *ObjContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_obj
}

func (*ObjContext) IsObjContext() {}

func NewObjContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjContext {
	var p = new(ObjContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_obj

	return p
}

func (s *ObjContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ObjContext) TK_lbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrk, 0)
}

func (s *ObjContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ObjContext) TK_rbrk() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrk, 0)
}

func (s *ObjContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterObj(s)
	}
}

func (s *ObjContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitObj(s)
	}
}

func (p *ParserParser) Obj() (localctx IObjContext) {
	localctx = NewObjContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ParserParserRULE_obj)
	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(669)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(670)
			p.Match(ParserParserTK_lbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(671)
			p.exp(0)
		}
		{
			p.SetState(672)
			p.Match(ParserParserTK_rbrk)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(674)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUseattribs1Context is an interface to support dynamic dispatch.
type IUseattribs1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TK_dot() antlr.TerminalNode
	TK_id() antlr.TerminalNode
	Useattribs1() IUseattribs1Context

	// IsUseattribs1Context differentiates from other interfaces.
	IsUseattribs1Context()
}

type Useattribs1Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseattribs1Context() *Useattribs1Context {
	var p = new(Useattribs1Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_useattribs1
	return p
}

func InitEmptyUseattribs1Context(p *Useattribs1Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_useattribs1
}

func (*Useattribs1Context) IsUseattribs1Context() {}

func NewUseattribs1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Useattribs1Context {
	var p = new(Useattribs1Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_useattribs1

	return p
}

func (s *Useattribs1Context) GetParser() antlr.Parser { return s.parser }

func (s *Useattribs1Context) TK_dot() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, 0)
}

func (s *Useattribs1Context) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *Useattribs1Context) Useattribs1() IUseattribs1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseattribs1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseattribs1Context)
}

func (s *Useattribs1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Useattribs1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Useattribs1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterUseattribs1(s)
	}
}

func (s *Useattribs1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitUseattribs1(s)
	}
}

func (p *ParserParser) Useattribs1() (localctx IUseattribs1Context) {
	localctx = NewUseattribs1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ParserParserRULE_useattribs1)
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(677)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(678)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(679)
			p.Useattribs1()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(680)
			p.Match(ParserParserTK_dot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(681)
			p.Match(ParserParserTK_id)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrintContext is an interface to support dynamic dispatch.
type IPrintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// GetExps returns the exps rule contexts.
	GetExps() IListexpContext

	// SetExps sets the exps rule contexts.
	SetExps(IListexpContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	RW_print() antlr.TerminalNode
	Listexp() IListexpContext

	// IsPrintContext differentiates from other interfaces.
	IsPrintContext()
}

type PrintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	p      antlr.Token
	exps   IListexpContext
}

func NewEmptyPrintContext() *PrintContext {
	var p = new(PrintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_print
	return p
}

func InitEmptyPrintContext(p *PrintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_print
}

func (*PrintContext) IsPrintContext() {}

func NewPrintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintContext {
	var p = new(PrintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_print

	return p
}

func (s *PrintContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintContext) GetP() antlr.Token { return s.p }

func (s *PrintContext) SetP(v antlr.Token) { s.p = v }

func (s *PrintContext) GetExps() IListexpContext { return s.exps }

func (s *PrintContext) SetExps(v IListexpContext) { s.exps = v }

func (s *PrintContext) GetResult() interfaces.Instruction { return s.result }

func (s *PrintContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *PrintContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *PrintContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *PrintContext) RW_print() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_print, 0)
}

func (s *PrintContext) Listexp() IListexpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListexpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListexpContext)
}

func (s *PrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterPrint(s)
	}
}

func (s *PrintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitPrint(s)
	}
}

func (p *ParserParser) Print_() (localctx IPrintContext) {
	localctx = NewPrintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ParserParserRULE_print)
	p.SetState(694)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(684)

			var _m = p.Match(ParserParserRW_print)

			localctx.(*PrintContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(685)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(686)

			var _x = p.listexp(0)

			localctx.(*PrintContext).exps = _x
		}
		{
			p.SetState(687)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*PrintContext).result = instructions.NewPrint((func() int {
			if localctx.(*PrintContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*PrintContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*PrintContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*PrintContext).GetP().GetColumn()
			}
		}()), localctx.(*PrintContext).GetExps().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(690)

			var _m = p.Match(ParserParserRW_print)

			localctx.(*PrintContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(691)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(692)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*PrintContext).result = instructions.NewPrint((func() int {
			if localctx.(*PrintContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*PrintContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*PrintContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*PrintContext).GetP().GetColumn()
			}
		}()), nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnvContext is an interface to support dynamic dispatch.
type IEnvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l token.
	GetL() antlr.Token

	// SetL sets the l token.
	SetL(antlr.Token)

	// GetIns returns the ins rule contexts.
	GetIns() IInstructionsContext

	// SetIns sets the ins rule contexts.
	SetIns(IInstructionsContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Instruction

	// SetResult sets the result attribute.
	SetResult(interfaces.Instruction)

	// Getter signatures
	TK_rbrc() antlr.TerminalNode
	TK_lbrc() antlr.TerminalNode
	Instructions() IInstructionsContext

	// IsEnvContext differentiates from other interfaces.
	IsEnvContext()
}

type EnvContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Instruction
	l      antlr.Token
	ins    IInstructionsContext
}

func NewEmptyEnvContext() *EnvContext {
	var p = new(EnvContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_env
	return p
}

func InitEmptyEnvContext(p *EnvContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_env
}

func (*EnvContext) IsEnvContext() {}

func NewEnvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnvContext {
	var p = new(EnvContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_env

	return p
}

func (s *EnvContext) GetParser() antlr.Parser { return s.parser }

func (s *EnvContext) GetL() antlr.Token { return s.l }

func (s *EnvContext) SetL(v antlr.Token) { s.l = v }

func (s *EnvContext) GetIns() IInstructionsContext { return s.ins }

func (s *EnvContext) SetIns(v IInstructionsContext) { s.ins = v }

func (s *EnvContext) GetResult() interfaces.Instruction { return s.result }

func (s *EnvContext) SetResult(v interfaces.Instruction) { s.result = v }

func (s *EnvContext) TK_rbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rbrc, 0)
}

func (s *EnvContext) TK_lbrc() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lbrc, 0)
}

func (s *EnvContext) Instructions() IInstructionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionsContext)
}

func (s *EnvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterEnv(s)
	}
}

func (s *EnvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitEnv(s)
	}
}

func (p *ParserParser) Env() (localctx IEnvContext) {
	localctx = NewEnvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ParserParserRULE_env)
	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(696)

			var _m = p.Match(ParserParserTK_lbrc)

			localctx.(*EnvContext).l = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(697)

			var _x = p.instructions(0)

			localctx.(*EnvContext).ins = _x
		}
		{
			p.SetState(698)
			p.Match(ParserParserTK_rbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*EnvContext).result = instructions.NewBlock((func() int {
			if localctx.(*EnvContext).GetL() == nil {
				return 0
			} else {
				return localctx.(*EnvContext).GetL().GetLine()
			}
		}()), (func() int {
			if localctx.(*EnvContext).GetL() == nil {
				return 0
			} else {
				return localctx.(*EnvContext).GetL().GetColumn()
			}
		}()), localctx.(*EnvContext).GetIns().GetResult())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(701)

			var _m = p.Match(ParserParserTK_lbrc)

			localctx.(*EnvContext).l = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(702)
			p.Match(ParserParserTK_rbrc)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*EnvContext).result = instructions.NewBlock((func() int {
			if localctx.(*EnvContext).GetL() == nil {
				return 0
			} else {
				return localctx.(*EnvContext).GetL().GetLine()
			}
		}()), (func() int {
			if localctx.(*EnvContext).GetL() == nil {
				return 0
			} else {
				return localctx.(*EnvContext).GetL().GetColumn()
			}
		}()), []interface{}{})

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstructionsContext is an interface to support dynamic dispatch.
type IInstructionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() IInstructionsContext

	// GetI returns the i rule contexts.
	GetI() IInstructionContext

	// SetL sets the l rule contexts.
	SetL(IInstructionsContext)

	// SetI sets the i rule contexts.
	SetI(IInstructionContext)

	// GetResult returns the result attribute.
	GetResult() []interface{}

	// SetResult sets the result attribute.
	SetResult([]interface{})

	// Getter signatures
	Instruction() IInstructionContext
	Instructions() IInstructionsContext

	// IsInstructionsContext differentiates from other interfaces.
	IsInstructionsContext()
}

type InstructionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result []interface{}
	l      IInstructionsContext
	i      IInstructionContext
}

func NewEmptyInstructionsContext() *InstructionsContext {
	var p = new(InstructionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instructions
	return p
}

func InitEmptyInstructionsContext(p *InstructionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instructions
}

func (*InstructionsContext) IsInstructionsContext() {}

func NewInstructionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstructionsContext {
	var p = new(InstructionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_instructions

	return p
}

func (s *InstructionsContext) GetParser() antlr.Parser { return s.parser }

func (s *InstructionsContext) GetL() IInstructionsContext { return s.l }

func (s *InstructionsContext) GetI() IInstructionContext { return s.i }

func (s *InstructionsContext) SetL(v IInstructionsContext) { s.l = v }

func (s *InstructionsContext) SetI(v IInstructionContext) { s.i = v }

func (s *InstructionsContext) GetResult() []interface{} { return s.result }

func (s *InstructionsContext) SetResult(v []interface{}) { s.result = v }

func (s *InstructionsContext) Instruction() IInstructionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionContext)
}

func (s *InstructionsContext) Instructions() IInstructionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstructionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstructionsContext)
}

func (s *InstructionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstructionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstructionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterInstructions(s)
	}
}

func (s *InstructionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitInstructions(s)
	}
}

func (p *ParserParser) Instructions() (localctx IInstructionsContext) {
	return p.instructions(0)
}

func (p *ParserParser) instructions(_p int) (localctx IInstructionsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewInstructionsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInstructionsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, ParserParserRULE_instructions, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)

		var _x = p.Instruction()

		localctx.(*InstructionsContext).i = _x
	}
	localctx.(*InstructionsContext).result = []interface{}{localctx.(*InstructionsContext).GetI().GetResult()}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(716)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInstructionsContext(p, _parentctx, _parentState)
			localctx.(*InstructionsContext).l = _prevctx
			p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_instructions)
			p.SetState(710)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(711)

				var _x = p.Instruction()

				localctx.(*InstructionsContext).i = _x
			}
			localctx.(*InstructionsContext).SetResult(localctx.(*InstructionsContext).GetL().GetResult())
			localctx.(*InstructionsContext).result = append(localctx.(*InstructionsContext).result, localctx.(*InstructionsContext).GetI().GetResult())

		}
		p.SetState(718)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstructionContext is an interface to support dynamic dispatch.
type IInstructionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInst18 returns the inst18 token.
	GetInst18() antlr.Token

	// GetInst19 returns the inst19 token.
	GetInst19() antlr.Token

	// GetInst20 returns the inst20 token.
	GetInst20() antlr.Token

	// GetInst21 returns the inst21 token.
	GetInst21() antlr.Token

	// SetInst18 sets the inst18 token.
	SetInst18(antlr.Token)

	// SetInst19 sets the inst19 token.
	SetInst19(antlr.Token)

	// SetInst20 sets the inst20 token.
	SetInst20(antlr.Token)

	// SetInst21 sets the inst21 token.
	SetInst21(antlr.Token)

	// GetInst1 returns the inst1 rule contexts.
	GetInst1() IDecvarContext

	// GetInst2 returns the inst2 rule contexts.
	GetInst2() IDeccstContext

	// GetInst3 returns the inst3 rule contexts.
	GetInst3() IIfstructContext

	// GetInst4 returns the inst4 rule contexts.
	GetInst4() ISwitchstructContext

	// GetInst5 returns the inst5 rule contexts.
	GetInst5() ILoopforContext

	// GetInst6 returns the inst6 rule contexts.
	GetInst6() ILoopwhileContext

	// GetInst7 returns the inst7 rule contexts.
	GetInst7() IGuardContext

	// GetInst8 returns the inst8 rule contexts.
	GetInst8() IReasignContext

	// GetInst9 returns the inst9 rule contexts.
	GetInst9() IAddsubContext

	// GetInst10 returns the inst10 rule contexts.
	GetInst10() IDecvectorContext

	// GetInst11 returns the inst11 rule contexts.
	GetInst11() IFuncvectorContext

	// GetInst12 returns the inst12 rule contexts.
	GetInst12() IReasignvectorContext

	// GetInst13 returns the inst13 rule contexts.
	GetInst13() IDecmatrixContext

	// GetInst17 returns the inst17 rule contexts.
	GetInst17() IPrintContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// SetInst1 sets the inst1 rule contexts.
	SetInst1(IDecvarContext)

	// SetInst2 sets the inst2 rule contexts.
	SetInst2(IDeccstContext)

	// SetInst3 sets the inst3 rule contexts.
	SetInst3(IIfstructContext)

	// SetInst4 sets the inst4 rule contexts.
	SetInst4(ISwitchstructContext)

	// SetInst5 sets the inst5 rule contexts.
	SetInst5(ILoopforContext)

	// SetInst6 sets the inst6 rule contexts.
	SetInst6(ILoopwhileContext)

	// SetInst7 sets the inst7 rule contexts.
	SetInst7(IGuardContext)

	// SetInst8 sets the inst8 rule contexts.
	SetInst8(IReasignContext)

	// SetInst9 sets the inst9 rule contexts.
	SetInst9(IAddsubContext)

	// SetInst10 sets the inst10 rule contexts.
	SetInst10(IDecvectorContext)

	// SetInst11 sets the inst11 rule contexts.
	SetInst11(IFuncvectorContext)

	// SetInst12 sets the inst12 rule contexts.
	SetInst12(IReasignvectorContext)

	// SetInst13 sets the inst13 rule contexts.
	SetInst13(IDecmatrixContext)

	// SetInst17 sets the inst17 rule contexts.
	SetInst17(IPrintContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// GetResult returns the result attribute.
	GetResult() interface{}

	// SetResult sets the result attribute.
	SetResult(interface{})

	// Getter signatures
	Decvar() IDecvarContext
	TK_semicolon() antlr.TerminalNode
	Deccst() IDeccstContext
	Ifstruct() IIfstructContext
	Switchstruct() ISwitchstructContext
	Loopfor() ILoopforContext
	Loopwhile() ILoopwhileContext
	Guard() IGuardContext
	Reasign() IReasignContext
	RW_self() antlr.TerminalNode
	TK_dot() antlr.TerminalNode
	Addsub() IAddsubContext
	Decvector() IDecvectorContext
	Funcvector() IFuncvectorContext
	Reasignvector() IReasignvectorContext
	Decmatrix() IDecmatrixContext
	Decstruct() IDecstructContext
	Useattribs() IUseattribsContext
	Callfunc() ICallfuncContext
	Print_() IPrintContext
	RW_return() antlr.TerminalNode
	Exp() IExpContext
	RW_continue() antlr.TerminalNode
	RW_break() antlr.TerminalNode

	// IsInstructionContext differentiates from other interfaces.
	IsInstructionContext()
}

type InstructionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interface{}
	inst1  IDecvarContext
	inst2  IDeccstContext
	inst3  IIfstructContext
	inst4  ISwitchstructContext
	inst5  ILoopforContext
	inst6  ILoopwhileContext
	inst7  IGuardContext
	inst8  IReasignContext
	inst9  IAddsubContext
	inst10 IDecvectorContext
	inst11 IFuncvectorContext
	inst12 IReasignvectorContext
	inst13 IDecmatrixContext
	inst17 IPrintContext
	inst18 antlr.Token
	e      IExpContext
	inst19 antlr.Token
	inst20 antlr.Token
	inst21 antlr.Token
}

func NewEmptyInstructionContext() *InstructionContext {
	var p = new(InstructionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instruction
	return p
}

func InitEmptyInstructionContext(p *InstructionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_instruction
}

func (*InstructionContext) IsInstructionContext() {}

func NewInstructionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstructionContext {
	var p = new(InstructionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_instruction

	return p
}

func (s *InstructionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstructionContext) GetInst18() antlr.Token { return s.inst18 }

func (s *InstructionContext) GetInst19() antlr.Token { return s.inst19 }

func (s *InstructionContext) GetInst20() antlr.Token { return s.inst20 }

func (s *InstructionContext) GetInst21() antlr.Token { return s.inst21 }

func (s *InstructionContext) SetInst18(v antlr.Token) { s.inst18 = v }

func (s *InstructionContext) SetInst19(v antlr.Token) { s.inst19 = v }

func (s *InstructionContext) SetInst20(v antlr.Token) { s.inst20 = v }

func (s *InstructionContext) SetInst21(v antlr.Token) { s.inst21 = v }

func (s *InstructionContext) GetInst1() IDecvarContext { return s.inst1 }

func (s *InstructionContext) GetInst2() IDeccstContext { return s.inst2 }

func (s *InstructionContext) GetInst3() IIfstructContext { return s.inst3 }

func (s *InstructionContext) GetInst4() ISwitchstructContext { return s.inst4 }

func (s *InstructionContext) GetInst5() ILoopforContext { return s.inst5 }

func (s *InstructionContext) GetInst6() ILoopwhileContext { return s.inst6 }

func (s *InstructionContext) GetInst7() IGuardContext { return s.inst7 }

func (s *InstructionContext) GetInst8() IReasignContext { return s.inst8 }

func (s *InstructionContext) GetInst9() IAddsubContext { return s.inst9 }

func (s *InstructionContext) GetInst10() IDecvectorContext { return s.inst10 }

func (s *InstructionContext) GetInst11() IFuncvectorContext { return s.inst11 }

func (s *InstructionContext) GetInst12() IReasignvectorContext { return s.inst12 }

func (s *InstructionContext) GetInst13() IDecmatrixContext { return s.inst13 }

func (s *InstructionContext) GetInst17() IPrintContext { return s.inst17 }

func (s *InstructionContext) GetE() IExpContext { return s.e }

func (s *InstructionContext) SetInst1(v IDecvarContext) { s.inst1 = v }

func (s *InstructionContext) SetInst2(v IDeccstContext) { s.inst2 = v }

func (s *InstructionContext) SetInst3(v IIfstructContext) { s.inst3 = v }

func (s *InstructionContext) SetInst4(v ISwitchstructContext) { s.inst4 = v }

func (s *InstructionContext) SetInst5(v ILoopforContext) { s.inst5 = v }

func (s *InstructionContext) SetInst6(v ILoopwhileContext) { s.inst6 = v }

func (s *InstructionContext) SetInst7(v IGuardContext) { s.inst7 = v }

func (s *InstructionContext) SetInst8(v IReasignContext) { s.inst8 = v }

func (s *InstructionContext) SetInst9(v IAddsubContext) { s.inst9 = v }

func (s *InstructionContext) SetInst10(v IDecvectorContext) { s.inst10 = v }

func (s *InstructionContext) SetInst11(v IFuncvectorContext) { s.inst11 = v }

func (s *InstructionContext) SetInst12(v IReasignvectorContext) { s.inst12 = v }

func (s *InstructionContext) SetInst13(v IDecmatrixContext) { s.inst13 = v }

func (s *InstructionContext) SetInst17(v IPrintContext) { s.inst17 = v }

func (s *InstructionContext) SetE(v IExpContext) { s.e = v }

func (s *InstructionContext) GetResult() interface{} { return s.result }

func (s *InstructionContext) SetResult(v interface{}) { s.result = v }

func (s *InstructionContext) Decvar() IDecvarContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecvarContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecvarContext)
}

func (s *InstructionContext) TK_semicolon() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_semicolon, 0)
}

func (s *InstructionContext) Deccst() IDeccstContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeccstContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeccstContext)
}

func (s *InstructionContext) Ifstruct() IIfstructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfstructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfstructContext)
}

func (s *InstructionContext) Switchstruct() ISwitchstructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchstructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchstructContext)
}

func (s *InstructionContext) Loopfor() ILoopforContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoopforContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoopforContext)
}

func (s *InstructionContext) Loopwhile() ILoopwhileContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoopwhileContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoopwhileContext)
}

func (s *InstructionContext) Guard() IGuardContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGuardContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGuardContext)
}

func (s *InstructionContext) Reasign() IReasignContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReasignContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReasignContext)
}

func (s *InstructionContext) RW_self() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_self, 0)
}

func (s *InstructionContext) TK_dot() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, 0)
}

func (s *InstructionContext) Addsub() IAddsubContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAddsubContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAddsubContext)
}

func (s *InstructionContext) Decvector() IDecvectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecvectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecvectorContext)
}

func (s *InstructionContext) Funcvector() IFuncvectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFuncvectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFuncvectorContext)
}

func (s *InstructionContext) Reasignvector() IReasignvectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReasignvectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReasignvectorContext)
}

func (s *InstructionContext) Decmatrix() IDecmatrixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecmatrixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecmatrixContext)
}

func (s *InstructionContext) Decstruct() IDecstructContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecstructContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecstructContext)
}

func (s *InstructionContext) Useattribs() IUseattribsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseattribsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseattribsContext)
}

func (s *InstructionContext) Callfunc() ICallfuncContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallfuncContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallfuncContext)
}

func (s *InstructionContext) Print_() IPrintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrintContext)
}

func (s *InstructionContext) RW_return() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_return, 0)
}

func (s *InstructionContext) Exp() IExpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *InstructionContext) RW_continue() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_continue, 0)
}

func (s *InstructionContext) RW_break() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_break, 0)
}

func (s *InstructionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstructionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstructionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterInstruction(s)
	}
}

func (s *InstructionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitInstruction(s)
	}
}

func (p *ParserParser) Instruction() (localctx IInstructionContext) {
	localctx = NewInstructionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ParserParserRULE_instruction)
	var _la int

	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(719)

			var _x = p.Decvar()

			localctx.(*InstructionContext).inst1 = _x
		}
		p.SetState(721)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(720)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst1().GetResult()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(725)

			var _x = p.Deccst()

			localctx.(*InstructionContext).inst2 = _x
		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(726)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst2().GetResult()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(731)

			var _x = p.Ifstruct()

			localctx.(*InstructionContext).inst3 = _x
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst3().GetResult()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(734)

			var _x = p.Switchstruct()

			localctx.(*InstructionContext).inst4 = _x
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst4().GetResult()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(737)

			var _x = p.Loopfor()

			localctx.(*InstructionContext).inst5 = _x
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst5().GetResult()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(740)

			var _x = p.Loopwhile()

			localctx.(*InstructionContext).inst6 = _x
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst6().GetResult()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(743)

			var _x = p.Guard()

			localctx.(*InstructionContext).inst7 = _x
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst7().GetResult()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(746)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(747)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(750)

			var _x = p.Reasign()

			localctx.(*InstructionContext).inst8 = _x
		}
		p.SetState(752)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(751)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst8().GetResult()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(756)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(757)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(760)

			var _x = p.Addsub()

			localctx.(*InstructionContext).inst9 = _x
		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(761)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst9().GetResult()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(766)

			var _x = p.Decvector()

			localctx.(*InstructionContext).inst10 = _x
		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(767)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst10().GetResult()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(772)

			var _x = p.Funcvector()

			localctx.(*InstructionContext).inst11 = _x
		}
		p.SetState(774)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(773)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst11().GetResult()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		p.SetState(780)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(778)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(779)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(782)

			var _x = p.Reasignvector()

			localctx.(*InstructionContext).inst12 = _x
		}
		p.SetState(784)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(783)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst12().GetResult()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(788)

			var _x = p.Decmatrix()

			localctx.(*InstructionContext).inst13 = _x
		}
		p.SetState(790)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(789)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst13().GetResult()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(794)
			p.Decstruct()
		}
		p.SetState(796)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(795)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		p.SetState(800)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(798)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(799)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(802)
			p.Useattribs()
		}
		p.SetState(804)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(803)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		p.SetState(808)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(806)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(807)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(810)
			p.Callfunc()
		}
		p.SetState(812)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(811)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(814)

			var _x = p.Print_()

			localctx.(*InstructionContext).inst17 = _x
		}
		p.SetState(816)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(815)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = localctx.(*InstructionContext).GetInst17().GetResult()

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(820)

			var _m = p.Match(ParserParserRW_return)

			localctx.(*InstructionContext).inst18 = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(821)

			var _x = p.exp(0)

			localctx.(*InstructionContext).e = _x
		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(822)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = expressions.NewReturn((func() int {
			if localctx.(*InstructionContext).GetInst18() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst18().GetLine()
			}
		}()), (func() int {
			if localctx.(*InstructionContext).GetInst18() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst18().GetLine()
			}
		}()), localctx.(*InstructionContext).GetE().GetResult())

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(827)

			var _m = p.Match(ParserParserRW_return)

			localctx.(*InstructionContext).inst19 = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(829)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(828)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = expressions.NewReturn((func() int {
			if localctx.(*InstructionContext).GetInst19() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst19().GetLine()
			}
		}()), (func() int {
			if localctx.(*InstructionContext).GetInst19() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst19().GetLine()
			}
		}()), nil)

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(832)

			var _m = p.Match(ParserParserRW_continue)

			localctx.(*InstructionContext).inst20 = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(834)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(833)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = instructions.NewContinue((func() int {
			if localctx.(*InstructionContext).GetInst20() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst20().GetLine()
			}
		}()), (func() int {
			if localctx.(*InstructionContext).GetInst20() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst20().GetLine()
			}
		}()))

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(837)

			var _m = p.Match(ParserParserRW_break)

			localctx.(*InstructionContext).inst21 = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(839)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(838)
				p.Match(ParserParserTK_semicolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		localctx.(*InstructionContext).result = instructions.NewBreak((func() int {
			if localctx.(*InstructionContext).GetInst21() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst21().GetLine()
			}
		}()), (func() int {
			if localctx.(*InstructionContext).GetInst21() == nil {
				return 0
			} else {
				return localctx.(*InstructionContext).GetInst21().GetLine()
			}
		}()))

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// GetResult returns the result attribute.
	GetResult() utils.AttribsType

	// SetResult sets the result attribute.
	SetResult(utils.AttribsType)

	// Getter signatures
	RW_String() antlr.TerminalNode
	RW_Int() antlr.TerminalNode
	RW_Bool() antlr.TerminalNode
	RW_Character() antlr.TerminalNode
	RW_Float() antlr.TerminalNode

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result utils.AttribsType
	t      antlr.Token
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) GetT() antlr.Token { return s.t }

func (s *TypeContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeContext) GetResult() utils.AttribsType { return s.result }

func (s *TypeContext) SetResult(v utils.AttribsType) { s.result = v }

func (s *TypeContext) RW_String() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_String, 0)
}

func (s *TypeContext) RW_Int() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_Int, 0)
}

func (s *TypeContext) RW_Bool() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_Bool, 0)
}

func (s *TypeContext) RW_Character() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_Character, 0)
}

func (s *TypeContext) RW_Float() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_Float, 0)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterType(s)
	}
}

func (s *TypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitType(s)
	}
}

func (p *ParserParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ParserParserRULE_type)
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ParserParserRW_String:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(844)

			var _m = p.Match(ParserParserRW_String)

			localctx.(*TypeContext).t = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetColumn()
			}
		}()), utils.STRING, true)

	case ParserParserRW_Int:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(846)

			var _m = p.Match(ParserParserRW_Int)

			localctx.(*TypeContext).t = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetColumn()
			}
		}()), utils.INT, true)

	case ParserParserRW_Bool:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(848)

			var _m = p.Match(ParserParserRW_Bool)

			localctx.(*TypeContext).t = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetColumn()
			}
		}()), utils.BOOLEAN, true)

	case ParserParserRW_Character:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(850)

			var _m = p.Match(ParserParserRW_Character)

			localctx.(*TypeContext).t = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetColumn()
			}
		}()), utils.CHAR, true)

	case ParserParserRW_Float:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(852)

			var _m = p.Match(ParserParserRW_Float)

			localctx.(*TypeContext).t = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeContext).GetT() == nil {
				return 0
			} else {
				return localctx.(*TypeContext).GetT().GetColumn()
			}
		}()), utils.FLOAT, true)

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeCompContext is an interface to support dynamic dispatch.
type ITypeCompContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetI returns the i token.
	GetI() antlr.Token

	// SetI sets the i token.
	SetI(antlr.Token)

	// GetT returns the t rule contexts.
	GetT() ITypeContext

	// SetT sets the t rule contexts.
	SetT(ITypeContext)

	// GetResult returns the result attribute.
	GetResult() utils.AttribsType

	// SetResult sets the result attribute.
	SetResult(utils.AttribsType)

	// Getter signatures
	Type_() ITypeContext
	TK_id() antlr.TerminalNode

	// IsTypeCompContext differentiates from other interfaces.
	IsTypeCompContext()
}

type TypeCompContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result utils.AttribsType
	t      ITypeContext
	i      antlr.Token
}

func NewEmptyTypeCompContext() *TypeCompContext {
	var p = new(TypeCompContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_typeComp
	return p
}

func InitEmptyTypeCompContext(p *TypeCompContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_typeComp
}

func (*TypeCompContext) IsTypeCompContext() {}

func NewTypeCompContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCompContext {
	var p = new(TypeCompContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_typeComp

	return p
}

func (s *TypeCompContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCompContext) GetI() antlr.Token { return s.i }

func (s *TypeCompContext) SetI(v antlr.Token) { s.i = v }

func (s *TypeCompContext) GetT() ITypeContext { return s.t }

func (s *TypeCompContext) SetT(v ITypeContext) { s.t = v }

func (s *TypeCompContext) GetResult() utils.AttribsType { return s.result }

func (s *TypeCompContext) SetResult(v utils.AttribsType) { s.result = v }

func (s *TypeCompContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypeCompContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *TypeCompContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCompContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCompContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterTypeComp(s)
	}
}

func (s *TypeCompContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitTypeComp(s)
	}
}

func (p *ParserParser) TypeComp() (localctx ITypeCompContext) {
	localctx = NewTypeCompContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ParserParserRULE_typeComp)
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ParserParserRW_Int, ParserParserRW_Float, ParserParserRW_String, ParserParserRW_Bool, ParserParserRW_Character:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(856)

			var _x = p.Type_()

			localctx.(*TypeCompContext).t = _x
		}
		localctx.(*TypeCompContext).result = localctx.(*TypeCompContext).GetT().GetResult()

	case ParserParserTK_id:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(859)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*TypeCompContext).i = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*TypeCompContext).result = *utils.NewAttribsType((func() int {
			if localctx.(*TypeCompContext).GetI() == nil {
				return 0
			} else {
				return localctx.(*TypeCompContext).GetI().GetLine()
			}
		}()), (func() int {
			if localctx.(*TypeCompContext).GetI() == nil {
				return 0
			} else {
				return localctx.(*TypeCompContext).GetI().GetColumn()
			}
		}()), (func() string {
			if localctx.(*TypeCompContext).GetI() == nil {
				return ""
			} else {
				return localctx.(*TypeCompContext).GetI().GetText()
			}
		}()), false)

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpContext is an interface to support dynamic dispatch.
type IExpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetS returns the s token.
	GetS() antlr.Token

	// GetId returns the id token.
	GetId() antlr.Token

	// GetN returns the n token.
	GetN() antlr.Token

	// GetP returns the p token.
	GetP() antlr.Token

	// SetS sets the s token.
	SetS(antlr.Token)

	// SetId sets the id token.
	SetId(antlr.Token)

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetP sets the p token.
	SetP(antlr.Token)

	// GetE1 returns the e1 rule contexts.
	GetE1() IExpContext

	// GetE returns the e rule contexts.
	GetE() IExpContext

	// GetE2 returns the e2 rule contexts.
	GetE2() IExpContext

	// GetT returns the t rule contexts.
	GetT() ITypeContext

	// GetIndex returns the index rule contexts.
	GetIndex() IDimsContext

	// SetE1 sets the e1 rule contexts.
	SetE1(IExpContext)

	// SetE sets the e rule contexts.
	SetE(IExpContext)

	// SetE2 sets the e2 rule contexts.
	SetE2(IExpContext)

	// SetT sets the t rule contexts.
	SetT(ITypeContext)

	// SetIndex sets the index rule contexts.
	SetIndex(IDimsContext)

	// GetResult returns the result attribute.
	GetResult() interfaces.Expression

	// SetResult sets the result attribute.
	SetResult(interfaces.Expression)

	// Getter signatures
	TK_minus() antlr.TerminalNode
	AllExp() []IExpContext
	Exp(i int) IExpContext
	TK_not() antlr.TerminalNode
	TK_lpar() antlr.TerminalNode
	TK_rpar() antlr.TerminalNode
	Type_() ITypeContext
	TK_id() antlr.TerminalNode
	Dims() IDimsContext
	Useattribs() IUseattribsContext
	RW_self() antlr.TerminalNode
	TK_dot() antlr.TerminalNode
	Callfunc() ICallfuncContext
	RW_nil() antlr.TerminalNode
	TK_string() antlr.TerminalNode
	TK_char() antlr.TerminalNode
	TK_int() antlr.TerminalNode
	TK_float() antlr.TerminalNode
	RW_true() antlr.TerminalNode
	RW_false() antlr.TerminalNode
	TK_mult() antlr.TerminalNode
	TK_div() antlr.TerminalNode
	TK_mod() antlr.TerminalNode
	TK_plus() antlr.TerminalNode
	TK_lessequ() antlr.TerminalNode
	TK_moreequ() antlr.TerminalNode
	TK_less() antlr.TerminalNode
	TK_more() antlr.TerminalNode
	TK_equequ() antlr.TerminalNode
	TK_notequ() antlr.TerminalNode
	TK_and() antlr.TerminalNode
	TK_or() antlr.TerminalNode
	RW_isEmpty() antlr.TerminalNode
	RW_count() antlr.TerminalNode

	// IsExpContext differentiates from other interfaces.
	IsExpContext()
}

type ExpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	result interfaces.Expression
	e1     IExpContext
	e      IExpContext
	s      antlr.Token
	e2     IExpContext
	t      ITypeContext
	id     antlr.Token
	index  IDimsContext
	n      antlr.Token
	p      antlr.Token
}

func NewEmptyExpContext() *ExpContext {
	var p = new(ExpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_exp
	return p
}

func InitEmptyExpContext(p *ExpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ParserParserRULE_exp
}

func (*ExpContext) IsExpContext() {}

func NewExpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpContext {
	var p = new(ExpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ParserParserRULE_exp

	return p
}

func (s *ExpContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpContext) GetS() antlr.Token { return s.s }

func (s *ExpContext) GetId() antlr.Token { return s.id }

func (s *ExpContext) GetN() antlr.Token { return s.n }

func (s *ExpContext) GetP() antlr.Token { return s.p }

func (s *ExpContext) SetS(v antlr.Token) { s.s = v }

func (s *ExpContext) SetId(v antlr.Token) { s.id = v }

func (s *ExpContext) SetN(v antlr.Token) { s.n = v }

func (s *ExpContext) SetP(v antlr.Token) { s.p = v }

func (s *ExpContext) GetE1() IExpContext { return s.e1 }

func (s *ExpContext) GetE() IExpContext { return s.e }

func (s *ExpContext) GetE2() IExpContext { return s.e2 }

func (s *ExpContext) GetT() ITypeContext { return s.t }

func (s *ExpContext) GetIndex() IDimsContext { return s.index }

func (s *ExpContext) SetE1(v IExpContext) { s.e1 = v }

func (s *ExpContext) SetE(v IExpContext) { s.e = v }

func (s *ExpContext) SetE2(v IExpContext) { s.e2 = v }

func (s *ExpContext) SetT(v ITypeContext) { s.t = v }

func (s *ExpContext) SetIndex(v IDimsContext) { s.index = v }

func (s *ExpContext) GetResult() interfaces.Expression { return s.result }

func (s *ExpContext) SetResult(v interfaces.Expression) { s.result = v }

func (s *ExpContext) TK_minus() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_minus, 0)
}

func (s *ExpContext) AllExp() []IExpContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpContext); ok {
			len++
		}
	}

	tst := make([]IExpContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpContext); ok {
			tst[i] = t.(IExpContext)
			i++
		}
	}

	return tst
}

func (s *ExpContext) Exp(i int) IExpContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpContext)
}

func (s *ExpContext) TK_not() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_not, 0)
}

func (s *ExpContext) TK_lpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lpar, 0)
}

func (s *ExpContext) TK_rpar() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_rpar, 0)
}

func (s *ExpContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ExpContext) TK_id() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_id, 0)
}

func (s *ExpContext) Dims() IDimsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDimsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDimsContext)
}

func (s *ExpContext) Useattribs() IUseattribsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseattribsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseattribsContext)
}

func (s *ExpContext) RW_self() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_self, 0)
}

func (s *ExpContext) TK_dot() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_dot, 0)
}

func (s *ExpContext) Callfunc() ICallfuncContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallfuncContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallfuncContext)
}

func (s *ExpContext) RW_nil() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_nil, 0)
}

func (s *ExpContext) TK_string() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_string, 0)
}

func (s *ExpContext) TK_char() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_char, 0)
}

func (s *ExpContext) TK_int() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_int, 0)
}

func (s *ExpContext) TK_float() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_float, 0)
}

func (s *ExpContext) RW_true() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_true, 0)
}

func (s *ExpContext) RW_false() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_false, 0)
}

func (s *ExpContext) TK_mult() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_mult, 0)
}

func (s *ExpContext) TK_div() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_div, 0)
}

func (s *ExpContext) TK_mod() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_mod, 0)
}

func (s *ExpContext) TK_plus() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_plus, 0)
}

func (s *ExpContext) TK_lessequ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_lessequ, 0)
}

func (s *ExpContext) TK_moreequ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_moreequ, 0)
}

func (s *ExpContext) TK_less() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_less, 0)
}

func (s *ExpContext) TK_more() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_more, 0)
}

func (s *ExpContext) TK_equequ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_equequ, 0)
}

func (s *ExpContext) TK_notequ() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_notequ, 0)
}

func (s *ExpContext) TK_and() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_and, 0)
}

func (s *ExpContext) TK_or() antlr.TerminalNode {
	return s.GetToken(ParserParserTK_or, 0)
}

func (s *ExpContext) RW_isEmpty() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_isEmpty, 0)
}

func (s *ExpContext) RW_count() antlr.TerminalNode {
	return s.GetToken(ParserParserRW_count, 0)
}

func (s *ExpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.EnterExp(s)
	}
}

func (s *ExpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ParserListener); ok {
		listenerT.ExitExp(s)
	}
}

func (p *ParserParser) Exp() (localctx IExpContext) {
	return p.exp(0)
}

func (p *ParserParser) exp(_p int) (localctx IExpContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 98
	p.EnterRecursionRule(localctx, 98, ParserParserRULE_exp, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(917)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(864)

			var _m = p.Match(ParserParserTK_minus)

			localctx.(*ExpContext).s = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(865)

			var _x = p.exp(24)

			localctx.(*ExpContext).e2 = _x
		}
		localctx.(*ExpContext).result = expressions.NewArithmetic((func() int {
			if localctx.(*ExpContext).GetS() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetS().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetS() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetS().GetColumn()
			}
		}()), nil, (func() string {
			if localctx.(*ExpContext).GetS() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetS().GetText()
			}
		}()), localctx.(*ExpContext).GetE2().GetResult())

	case 2:
		{
			p.SetState(868)

			var _m = p.Match(ParserParserTK_not)

			localctx.(*ExpContext).s = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(869)

			var _x = p.exp(18)

			localctx.(*ExpContext).e2 = _x
		}
		localctx.(*ExpContext).result = expressions.NewLogic((func() int {
			if localctx.(*ExpContext).GetS() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetS().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetS() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetS().GetColumn()
			}
		}()), nil, (func() string {
			if localctx.(*ExpContext).GetS() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetS().GetText()
			}
		}()), localctx.(*ExpContext).GetE2().GetResult())

	case 3:
		{
			p.SetState(872)

			var _x = p.Type_()

			localctx.(*ExpContext).t = _x
		}
		{
			p.SetState(873)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(874)

			var _x = p.exp(0)

			localctx.(*ExpContext).e = _x
		}
		{
			p.SetState(875)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewCast(localctx.(*ExpContext).GetT().GetResult().Line, localctx.(*ExpContext).GetT().GetResult().Column, localctx.(*ExpContext).GetT().GetResult().Value.(utils.Type), localctx.(*ExpContext).GetE().GetResult())

	case 4:
		{
			p.SetState(878)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*ExpContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(879)

			var _x = p.dims(0)

			localctx.(*ExpContext).index = _x
		}
		localctx.(*ExpContext).result = expressions.NewAccessArray((func() int {
			if localctx.(*ExpContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetId().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetId().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetId().GetText()
			}
		}()), localctx.(*ExpContext).GetIndex().GetResult())

	case 5:
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(882)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(883)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(886)
			p.Useattribs()
		}

	case 6:
		p.SetState(889)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(887)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(888)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(891)
			p.Callfunc()
		}

	case 7:
		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ParserParserRW_self {
			{
				p.SetState(892)
				p.Match(ParserParserRW_self)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(893)
				p.Match(ParserParserTK_dot)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(896)

			var _m = p.Match(ParserParserTK_id)

			localctx.(*ExpContext).id = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewAccessID((func() int {
			if localctx.(*ExpContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetId().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetId().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetId().GetText()
			}
		}()))

	case 8:
		{
			p.SetState(898)

			var _m = p.Match(ParserParserRW_nil)

			localctx.(*ExpContext).n = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()), utils.NIL)

	case 9:
		{
			p.SetState(900)

			var _m = p.Match(ParserParserTK_string)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}())[1:len((func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()))-1], utils.STRING)

	case 10:
		{
			p.SetState(902)

			var _m = p.Match(ParserParserTK_char)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}())[1:len((func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()))-1], utils.CHAR)

	case 11:
		{
			p.SetState(904)

			var _m = p.Match(ParserParserTK_int)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()), utils.INT)

	case 12:
		{
			p.SetState(906)

			var _m = p.Match(ParserParserTK_float)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()), utils.FLOAT)

	case 13:
		{
			p.SetState(908)

			var _m = p.Match(ParserParserRW_true)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()), utils.BOOLEAN)

	case 14:
		{
			p.SetState(910)

			var _m = p.Match(ParserParserRW_false)

			localctx.(*ExpContext).p = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = expressions.NewPrimitive((func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetLine()
			}
		}()), (func() int {
			if localctx.(*ExpContext).GetP() == nil {
				return 0
			} else {
				return localctx.(*ExpContext).GetP().GetColumn()
			}
		}()), (func() string {
			if localctx.(*ExpContext).GetP() == nil {
				return ""
			} else {
				return localctx.(*ExpContext).GetP().GetText()
			}
		}()), utils.BOOLEAN)

	case 15:
		{
			p.SetState(912)
			p.Match(ParserParserTK_lpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(913)

			var _x = p.exp(0)

			localctx.(*ExpContext).e = _x
		}
		{
			p.SetState(914)
			p.Match(ParserParserTK_rpar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		localctx.(*ExpContext).result = localctx.(*ExpContext).GetE().GetResult()

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(962)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(919)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
					goto errorExit
				}
				{
					p.SetState(920)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpContext).s = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&985162418487296) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpContext).s = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(921)

					var _x = p.exp(24)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewArithmetic(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 2:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(924)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(925)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpContext).s = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ParserParserTK_plus || _la == ParserParserTK_minus) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpContext).s = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(926)

					var _x = p.exp(23)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewArithmetic(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 3:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(929)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(930)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpContext).s = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ParserParserTK_lessequ || _la == ParserParserTK_moreequ) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpContext).s = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(931)

					var _x = p.exp(22)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewRelational(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 4:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(934)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(935)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpContext).s = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ParserParserTK_less || _la == ParserParserTK_more) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpContext).s = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(936)

					var _x = p.exp(21)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewRelational(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 5:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(939)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(940)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpContext).s = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ParserParserTK_equequ || _la == ParserParserTK_notequ) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpContext).s = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(941)

					var _x = p.exp(20)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewRelational(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 6:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(944)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(945)

					var _m = p.Match(ParserParserTK_and)

					localctx.(*ExpContext).s = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(946)

					var _x = p.exp(18)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewLogic(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 7:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e1 = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(949)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(950)

					var _m = p.Match(ParserParserTK_or)

					localctx.(*ExpContext).s = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(951)

					var _x = p.exp(17)

					localctx.(*ExpContext).e2 = _x
				}
				localctx.(*ExpContext).result = expressions.NewLogic(localctx.(*ExpContext).GetE1().GetResult().LineN(), localctx.(*ExpContext).GetE1().GetResult().ColumnN(), localctx.(*ExpContext).GetE1().GetResult(), (func() string {
					if localctx.(*ExpContext).GetS() == nil {
						return ""
					} else {
						return localctx.(*ExpContext).GetS().GetText()
					}
				}()), localctx.(*ExpContext).GetE2().GetResult())

			case 8:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(954)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(955)
					p.Match(ParserParserTK_dot)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(956)
					p.Match(ParserParserRW_isEmpty)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*ExpContext).result = expressions.NewIsEmpty(localctx.(*ExpContext).GetE().GetResult().LineN(), localctx.(*ExpContext).GetE().GetResult().ColumnN(), localctx.(*ExpContext).GetE().GetResult())

			case 9:
				localctx = NewExpContext(p, _parentctx, _parentState)
				localctx.(*ExpContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, ParserParserRULE_exp)
				p.SetState(958)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(959)
					p.Match(ParserParserTK_dot)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(960)
					p.Match(ParserParserRW_count)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				localctx.(*ExpContext).result = expressions.NewCount(localctx.(*ExpContext).GetE().GetResult().LineN(), localctx.(*ExpContext).GetE().GetResult().ColumnN(), localctx.(*ExpContext).GetE().GetResult())

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(966)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ParserParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 1:
		var t *InstsglobalContext = nil
		if localctx != nil {
			t = localctx.(*InstsglobalContext)
		}
		return p.Instsglobal_Sempred(t, predIndex)

	case 13:
		var t *CasesContext = nil
		if localctx != nil {
			t = localctx.(*CasesContext)
		}
		return p.Cases_Sempred(t, predIndex)

	case 24:
		var t *ListexpContext = nil
		if localctx != nil {
			t = localctx.(*ListexpContext)
		}
		return p.Listexp_Sempred(t, predIndex)

	case 29:
		var t *VectorsContext = nil
		if localctx != nil {
			t = localctx.(*VectorsContext)
		}
		return p.Vectors_Sempred(t, predIndex)

	case 34:
		var t *DimsContext = nil
		if localctx != nil {
			t = localctx.(*DimsContext)
		}
		return p.Dims_Sempred(t, predIndex)

	case 36:
		var t *ListattribsContext = nil
		if localctx != nil {
			t = localctx.(*ListattribsContext)
		}
		return p.Listattribs_Sempred(t, predIndex)

	case 45:
		var t *InstructionsContext = nil
		if localctx != nil {
			t = localctx.(*InstructionsContext)
		}
		return p.Instructions_Sempred(t, predIndex)

	case 49:
		var t *ExpContext = nil
		if localctx != nil {
			t = localctx.(*ExpContext)
		}
		return p.Exp_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ParserParser) Instsglobal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Cases_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Listexp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Vectors_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Dims_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Listattribs_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Instructions_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ParserParser) Exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
